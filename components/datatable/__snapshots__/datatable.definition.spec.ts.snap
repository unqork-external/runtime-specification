// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Data Table Contract Tests should ensure the contract is clear 1`] = `
[
  "key",
  "type",
  "headers",
]
`;

exports[`Data Table Contract Tests should ensure the contract is clear 2`] = `
{
  "executable": {
    "default": true,
    "description": "Defines whether or not the object will respond to events or fire operations. When \`true\`, the object will perform and behave as defined in its spec. When \`false\`, the object will no longer be responsive to the system.",
    "type": "boolean",
  },
  "headers": {
    "description": "'headers' serve as a brief descriptor or label that identify the content or category of data within a particular column. A header should succinctly convey the type or purpose of the information presented in the column.",
    "examples": [
      [
        "season",
        "element",
      ],
      [
        "name",
        "element",
        "benderStatus",
      ],
      "<Example> Prompt: "I want to build a data table component with columns for name, age, and favorite color." Response: {"type":"datatable","headers":["name","age","favorite color"]} </Example>",
    ],
    "type": "array",
  },
  "initialData": {
    "description": "'initialData' holds the collection of data that the Data Table is first created with, structured as an array of objects. Each object represents a row in the table. The keys in each object correspond to the specified 'headers', and the values should then map to the corresponding cell within that object's row. 'initialData' holds the original values of the data before any transformation takes place. Values may include primitive data types or formulas.",
    "examples": [
      [
        {
          "element": "water",
          "season": "winter",
        },
        {
          "element": "air",
          "season": "spring",
        },
        {
          "element": "fire",
          "season": "summer",
        },
        {
          "element": "earth",
          "season": "fall",
        },
      ],
      [
        {
          "benderStatus": "=BOOLEAN(element)",
          "element": "water",
          "name": "Katara",
        },
        {
          "benderStatus": "=BOOLEAN(element)",
          "element": "air",
          "name": "Aang",
        },
        {
          "benderStatus": "=BOOLEAN(element)",
          "element": "fire",
          "name": "Zuko",
        },
        {
          "benderStatus": "=BOOLEAN(element)",
          "element": "earth",
          "name": "Toph",
        },
        {
          "benderStatus": "=BOOLEAN(element)",
          "name": "Sokka",
        },
      ],
      "<Example> Prompt: "I want to build a data table component with columns for 'firstName', 'lastName', and 'fullName'. 'fullName' should be a formula that joins 'firstName' and 'lastName', with a space in the middle. The initial data we have is [{ firstName: 'John', lastName: 'Doe'}, { firstName: 'Jane', lastName: 'Doe'}]." Response: {"type":"datatable","headers":["firstName","lastName","fullName"],"initialData":[{"firstName":"John","lastName":"Doe","fullName":"=CONCAT('firstName', ' ', 'lastName')"},{"firstName":"Jane","lastName":"Doe","fullName":"=CONCAT('firstName', ' ', 'lastName')"}]} </Example>",
    ],
    "type": "array",
  },
  "inputs": {
    "items": {
      "$ref": "#/definitions/InputRef",
    },
    "type": "array",
  },
  "key": {
    "description": "'key' is the user-defined, unique identifier for an object within a module. It doesn't have to be unique across different modules. Objects within the runtime use keys to target other objects.",
    "examples": [
      "I am the key",
      "bestKeyEver",
    ],
    "minLength": 1,
    "type": "string",
  },
  "package": {
    "$ref": "#/definitions/PackageModel",
  },
  "signals": {
    "description": "An object which contains all of the signals for the component. The signals object can have any number of target keys as defined in the component definition which each contain an array of Signals.",
    "examples": [
      {
        "args": {
          "inputs": {
            "propertyPath": "value",
            "required": true,
            "targetKey": "firstName",
          },
        },
        "id": "firstNameWatcher",
        "operations": [
          {
            "options": {
              "logType": "warn",
              "thingToPrint": "firstNameWatcher operations fired: value watcher triggered",
            },
            "type": "PRINTER",
          },
        ],
        "type": "onWatch",
      },
      {
        "id": "textfieldOnBlur",
        "operations": [
          {
            "options": {
              "logType": "warn",
              "thingToPrint": "textfield received blur event from DOM",
            },
            "type": "PRINTER",
          },
        ],
        "type": "onBlur",
      },
      "<Example> Prompt: "I want a textfield that will trigger the root execute signal on myValidationComponent when the textfield input receives a blur event." Response: [{"key":"yourGeneratedTextfield","type":"textfield","signals":{"input":[{"id":"textfieldOnBlur","operations":[{"type":"EXECUTE","options":{"targetKey":"myValidationComponent","signalTarget":"root","shouldExecute":true}}],"type":"onBlur"}]}}] </Example>",
    ],
    "type": "object",
  },
  "styling": {
    "$ref": "#/definitions/StylingModel",
  },
  "type": {
    "const": "datatable",
    "description": "Name of the type of component.",
    "examples": [
      "datatable",
    ],
    "minLength": 1,
    "type": "string",
  },
  "validation": {
    "$ref": "#/definitions/Validation",
  },
  "value": {
    "description": "Data Table's 'value' property refers to the information held within the table after 'initialData' has been parsed and the table gets populated. 'value' gets populated during Data Table initialization, and when the 'EXECUTE' operation is triggered on the Data Table, as long as 'executable' is TRUE.",
    "examples": [
      [
        {
          "element": "water",
          "season": "winter",
        },
        {
          "element": "air",
          "season": "spring",
        },
        {
          "element": "fire",
          "season": "summer",
        },
        {
          "element": "earth",
          "season": "fall",
        },
      ],
      [
        {
          "benderStatus": true,
          "element": "water",
          "name": "Katara",
        },
        {
          "benderStatus": true,
          "element": "air",
          "name": "Aang",
        },
        {
          "benderStatus": true,
          "element": "fire",
          "name": "Zuko",
        },
        {
          "benderStatus": true,
          "element": "earth",
          "name": "Toph",
        },
        {
          "benderStatus": false,
          "element": "",
          "name": "Sokka",
        },
      ],
    ],
    "type": "array",
  },
}
`;

exports[`Data Table Contract Tests should ensure the contract is clear 3`] = `
{
  "InputRef": {
    "description": "Inputs can be used to utlize dynamic values from other state within the runtime
  within a particular execution of an operation",
    "properties": {
      "alias": {
        "description": "Optionally alias resolved value for use in formulas",
        "type": "string",
      },
      "propertyPath": {
        "description": "Path to property on target to resolve",
        "type": "string",
      },
      "required": {
        "description": "If true, operation won't execute if targeted property has no value",
        "type": "boolean",
      },
      "silent": {
        "description": "Not used in later formulas, only used to determine if operation should execute",
        "type": "boolean",
      },
      "targetKey": {
        "description": "Key of target this input depends on",
        "minLength": 1,
        "type": "string",
      },
    },
    "required": [
      "targetKey",
    ],
    "type": "object",
  },
  "PackageModel": {
    "description": "The PackageModel describes how the Vega Runtime will resolve dependencies",
    "properties": {
      "type": {
        "description": "Type of package",
        "type": "string",
      },
      "url": {
        "description": "URL of package",
        "type": "string",
      },
      "version": {
        "description": "Version of package",
        "type": "string",
      },
    },
    "type": "object",
  },
  "StylingModel": {
    "description": "Holds information for targeted styling of the component.",
    "properties": {
      "targets": {
        "type": "object",
      },
    },
    "type": "object",
  },
  "Validation": {
    "description": "Holds the validation rules and the most current validation results for the component",
    "properties": {
      "isDirty": {
        "description": "Whether or not field has had user interaction. It will be set to true on user interaction.",
        "type": "boolean",
      },
      "result": {
        "$ref": "#/definitions/ValidationResult",
      },
      "rules": {
        "description": "The set of rules to restrict or define the accepted data for the current component. These are the rules to run for validation of the data input.",
        "examples": [
          "You can use it to define the max length of characters in an input field with a custom error message. rules: { required: { type: ValidationRuleTypes.MAX_LENGTH, validation: { maxLength: 5, }, errorMessage: 'Max length is 5', }, },",
        ],
        "type": "object",
      },
    },
    "type": "object",
  },
  "ValidationError": {
    "properties": {
      "message": {
        "description": "The error message",
        "type": "string",
      },
      "type": {
        "description": "Type of the error",
        "enum": [
          "required",
          "maxLength",
          "minLength",
          "arrayMinLength",
          "arrayMaxLength",
          "pattern",
          "min",
          "max",
          "mask",
          "number",
          "dateinput",
          "isBeforeDate",
          "isAfterDate",
          "customError",
          "isEmail",
        ],
        "minLength": 1,
        "type": "string",
      },
    },
    "required": [
      "type",
    ],
    "type": "object",
  },
  "ValidationResult": {
    "properties": {
      "errors": {
        "items": {
          "$ref": "#/definitions/ValidationError",
        },
        "type": "array",
      },
      "isValid": {
        "type": [
          "null",
          "boolean",
        ],
      },
    },
    "type": "object",
  },
}
`;
