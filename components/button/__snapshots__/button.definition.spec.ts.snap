// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Button Contract Tests should ensure the contract is clear 1`] = `
[
  "key",
  "type",
]
`;

exports[`Button Contract Tests should ensure the contract is clear 2`] = `
{
  "adornments": {
    "type": "object",
  },
  "disableOnInvalidForms": {
    "default": false,
    "description": "If \`true\`, Button will be disabled if forms are invalid.",
    "type": "boolean",
  },
  "display": {
    "$ref": "#/definitions/Display",
  },
  "domEvents": {
    "$ref": "#/definitions/ButtonDomEvents",
  },
  "executable": {
    "default": true,
    "description": "Defines whether or not the object will respond to events or fire operations. When \`true\`, the object will perform and behave as defined in its spec. When \`false\`, the object will no longer be responsive to the system.",
    "type": "boolean",
  },
  "field": {
    "$ref": "#/definitions/ButtonField",
  },
  "inputs": {
    "items": {
      "$ref": "#/definitions/InputRef",
    },
    "type": "array",
  },
  "key": {
    "description": "'key' is the user-defined, unique identifier for an object within a module. It doesn't have to be unique across different modules. Objects within the runtime use keys to target other objects.",
    "examples": [
      "I am the key",
      "bestKeyEver",
    ],
    "minLength": 1,
    "type": "string",
  },
  "left": {
    "description": "Fully qualified child keys for adornments in the left slot. Maintained by nestable API.",
    "items": {
      "default": [],
    },
    "type": "array",
  },
  "nestables": {
    "$ref": "#/definitions/NestableDef",
  },
  "oneClickOnly": {
    "default": false,
    "description": "When \`true\`, Button becomes disabled after one click.",
    "type": "boolean",
  },
  "options": {
    "$ref": "#/definitions/ButtonOptions",
  },
  "package": {
    "$ref": "#/definitions/PackageModel",
  },
  "preventDisableOnSubmitting": {
    "default": false,
    "description": "Control button disabled state when a submission is created.",
    "type": "boolean",
  },
  "right": {
    "description": "Fully qualified child keys for adornments in the right slot. Maintained by nestable api.",
    "items": {
      "default": [],
    },
    "type": "array",
  },
  "signals": {
    "description": "An object which contains all of the signals for the component. The signals object can have any number of target keys as defined in the component definition which each contain an array of Signals.",
    "examples": [
      {
        "args": {
          "inputs": {
            "propertyPath": "value",
            "required": true,
            "targetKey": "firstName",
          },
        },
        "id": "firstNameWatcher",
        "operations": [
          {
            "options": {
              "logType": "warn",
              "thingToPrint": "firstNameWatcher operations fired: value watcher triggered",
            },
            "type": "PRINTER",
          },
        ],
        "type": "onWatch",
      },
      {
        "id": "textfieldOnBlur",
        "operations": [
          {
            "options": {
              "logType": "warn",
              "thingToPrint": "textfield received blur event from DOM",
            },
            "type": "PRINTER",
          },
        ],
        "type": "onBlur",
      },
      "<Example> Prompt: "I want a textfield that will trigger the root execute signal on myValidationComponent when the textfield input receives a blur event." Response: [{"key":"yourGeneratedTextfield","type":"textfield","signals":{"input":[{"id":"textfieldOnBlur","operations":[{"type":"EXECUTE","options":{"targetKey":"myValidationComponent","signalTarget":"root","shouldExecute":true}}],"type":"onBlur"}]}}] </Example>",
    ],
    "type": "object",
  },
  "stepPath": {
    "description": "The unique path of the workflow step; you must provide a step path for go-to navigation.",
    "examples": [
      "stepone",
    ],
    "type": "string",
  },
  "styling": {
    "$ref": "#/definitions/ButtonStyling",
  },
  "type": {
    "const": "button",
    "description": "Name of the type of component.",
    "examples": [
      "button",
    ],
    "minLength": 1,
    "type": "string",
  },
  "useSimpleView": {
    "default": false,
    "description": "Boolean used to determine if the underlying view is simple and unstyled. For use in Vega Tables. This setting does not exist in Centauri.",
    "type": "boolean",
  },
  "validation": {
    "$ref": "#/definitions/Validation",
  },
  "value": {
    "description": "Current value of the component",
    "type": [
      "null",
      "integer",
      "number",
      "string",
      "boolean",
      "array",
      "object",
    ],
  },
}
`;

exports[`Button Contract Tests should ensure the contract is clear 3`] = `
{
  "ButtonDomEvents": {
    "properties": {
      "lastClicked": {
        "description": "The date of last Button click.",
        "examples": [
          "2024-04-25T16:59:17.292Z",
        ],
        "type": "string",
      },
    },
    "type": "object",
  },
  "ButtonField": {
    "properties": {
      "customClass": {
        "description": "Adds a custom CSS class to the component. This is useful for targeting this component to apply custom styles.",
        "type": "string",
      },
      "label": {
        "$ref": "#/definitions/ButtonLabel",
      },
    },
    "type": "object",
  },
  "ButtonLabel": {
    "properties": {
      "text": {
        "default": "Submit",
        "description": "Label Text displayed within the Button.",
        "examples": [
          "Submit",
        ],
        "type": "string",
      },
    },
    "type": "object",
  },
  "ButtonOptions": {
    "properties": {
      "buttonType": {
        "default": "button",
        "description": "Button type attribute applied to the HTML element; dynamically determined based on the Button action type.",
        "enum": [
          "button",
          "reset",
        ],
        "examples": [
          "button",
          "reset",
        ],
        "type": "string",
      },
      "isWidthBlock": {
        "default": false,
        "description": "If true, Button's width adjusts based on the length of its Label Text. If false, Button's width is the full width of the page or column, with the Label Text centered.",
        "type": "boolean",
      },
      "leftIcon": {
        "description": "A CSS class for icons to the left of your Button's Label Text.",
        "examples": [
          "fa fa-desktop",
        ],
        "type": "string",
      },
      "rightIcon": {
        "description": "A CSS class for icons to the right of your Button's Label Text.",
        "examples": [
          "fa fa-plus",
        ],
        "type": "string",
      },
      "size": {
        "default": "md",
        "description": "Button size. Options include: XS, SM, MG, LG",
        "enum": [
          "xs",
          "sm",
          "md",
          "lg",
        ],
        "examples": [
          "lg",
          "md",
          "sm",
          "xs",
        ],
        "type": "string",
      },
      "theme": {
        "default": "primary",
        "description": "Sets the visual appearance of the Button. Options include: Primary, Secondary, Success, Danger, Warning, Info, Light, Dark, and Link.",
        "enum": [
          "primary",
          "secondary",
          "success",
          "danger",
          "warning",
          "info",
          "light",
          "dark",
          "link",
        ],
        "examples": [
          "primary",
        ],
        "type": "string",
      },
    },
    "type": "object",
  },
  "ButtonStyleTargets": {
    "properties": {
      "button": {
        "description": "Adds styles to Button's button HTML element.",
        "oneOf": [
          {
            "type": "string",
          },
          {
            "type": "object",
          },
          {
            "items": {
              "oneOf": [
                {
                  "type": "string",
                },
                {
                  "type": "object",
                },
              ],
            },
            "type": "array",
          },
        ],
      },
      "errorsFieldError": {
        "description": "Adds styles to Errors Field error root element, which is rendered within the LI elements.",
        "oneOf": [
          {
            "type": "string",
          },
          {
            "type": "object",
          },
          {
            "items": {
              "oneOf": [
                {
                  "type": "string",
                },
                {
                  "type": "object",
                },
              ],
            },
            "type": "array",
          },
        ],
      },
      "errorsRoot": {
        "description": "Adds styles to Errors component root, which is rendered within the Button component.",
        "oneOf": [
          {
            "type": "string",
          },
          {
            "type": "object",
          },
          {
            "items": {
              "oneOf": [
                {
                  "type": "string",
                },
                {
                  "type": "object",
                },
              ],
            },
            "type": "array",
          },
        ],
      },
      "errorsUnorderedList": {
        "description": "Adds styles to Errors component UL element.",
        "oneOf": [
          {
            "type": "string",
          },
          {
            "type": "object",
          },
          {
            "items": {
              "oneOf": [
                {
                  "type": "string",
                },
                {
                  "type": "object",
                },
              ],
            },
            "type": "array",
          },
        ],
      },
      "errorsUnorderedListItem": {
        "description": "Adds styles to Errors component LI elements.",
        "oneOf": [
          {
            "type": "string",
          },
          {
            "type": "object",
          },
          {
            "items": {
              "oneOf": [
                {
                  "type": "string",
                },
                {
                  "type": "object",
                },
              ],
            },
            "type": "array",
          },
        ],
      },
      "label": {
        "description": "Adds styles to Button's text label.",
        "oneOf": [
          {
            "type": "string",
          },
          {
            "type": "object",
          },
          {
            "items": {
              "oneOf": [
                {
                  "type": "string",
                },
                {
                  "type": "object",
                },
              ],
            },
            "type": "array",
          },
        ],
      },
      "leftIcon": {
        "description": "Adds styles to Button's left icon.",
        "oneOf": [
          {
            "type": "string",
          },
          {
            "type": "object",
          },
          {
            "items": {
              "oneOf": [
                {
                  "type": "string",
                },
                {
                  "type": "object",
                },
              ],
            },
            "type": "array",
          },
        ],
      },
      "loadingIcon": {
        "description": "Adds styles to Button's loading icon.",
        "oneOf": [
          {
            "type": "string",
          },
          {
            "type": "object",
          },
          {
            "items": {
              "oneOf": [
                {
                  "type": "string",
                },
                {
                  "type": "object",
                },
              ],
            },
            "type": "array",
          },
        ],
      },
      "rightIcon": {
        "description": "Adds styles to Button's right icon.",
        "oneOf": [
          {
            "type": "string",
          },
          {
            "type": "object",
          },
          {
            "items": {
              "oneOf": [
                {
                  "type": "string",
                },
                {
                  "type": "object",
                },
              ],
            },
            "type": "array",
          },
        ],
      },
      "root": {
        "description": "Adds styles to Button root ComponentWrapper.",
        "oneOf": [
          {
            "type": "string",
          },
          {
            "type": "object",
          },
          {
            "items": {
              "oneOf": [
                {
                  "type": "string",
                },
                {
                  "type": "object",
                },
              ],
            },
            "type": "array",
          },
        ],
      },
      "simpleViewButton": {
        "description": "Adds styles to ButtonSimpleView's button HTML element.",
        "oneOf": [
          {
            "type": "string",
          },
          {
            "type": "object",
          },
          {
            "items": {
              "oneOf": [
                {
                  "type": "string",
                },
                {
                  "type": "object",
                },
              ],
            },
            "type": "array",
          },
        ],
      },
      "simpleViewRoot": {
        "description": "Adds styles to ButtonSimpleView's root, which wraps the button HTML element.",
        "oneOf": [
          {
            "type": "string",
          },
          {
            "type": "object",
          },
          {
            "items": {
              "oneOf": [
                {
                  "type": "string",
                },
                {
                  "type": "object",
                },
              ],
            },
            "type": "array",
          },
        ],
      },
    },
    "type": "object",
  },
  "ButtonStyling": {
    "description": "Holds information for targeted styling of the component.",
    "properties": {
      "targets": {
        "$ref": "#/definitions/ButtonStyleTargets",
        "type": "object",
      },
    },
    "type": "object",
  },
  "Display": {
    "description": "Basic UI settings related to how a component may be displayed and interacted with. 'Hidden' corresponds to visibility. 'Interactive' corresponds to the end-user's ability to interact with input components. 'Read Only View' corresponds to the component being rendered with an input element or as text.",
    "properties": {
      "hidden": {
        "default": false,
        "description": "Setting it to \`true\` hides the component from the view, while \`false\` shows it. Regardless of this setting, the component is always visible in the Module Editor. A hidden component can still receive information from other components.",
        "type": "boolean",
      },
      "interactive": {
        "default": true,
        "description": "When \`false\`, it is not possible to interact with or edit the input field. Its appearance is modified (grayed-out by default) to show its state, the HTML 'disabled' attribute is added to the field, and when hovering over it, the cursor also changes to alert of the disabled status. However, the component can still receive information from other components when it's not interactive.",
        "type": "boolean",
      },
      "readOnlyView": {
        "default": false,
        "description": "Defines how the component will be displayed. When \`false\`, the component is displayed as an input field. When \`true\`, the component will not accept any input from the user, and its value will be rendered inline as text and not as an input component. If no value is present, the word 'None' is rendered. If a prefix or suffix is set for the component, they also appear as inline text.",
        "type": "boolean",
      },
    },
    "type": "object",
  },
  "InputRef": {
    "description": "Objects may define other targets that they refer to. This becomes a link for operation execution within the Runtime.",
    "properties": {
      "alias": {
        "type": "string",
      },
      "propertyPath": {
        "type": "string",
      },
      "required": {
        "type": "boolean",
      },
      "silent": {
        "type": "boolean",
      },
      "targetKey": {
        "minLength": 1,
        "type": "string",
      },
      "type": {
        "type": "string",
      },
    },
    "required": [
      "targetKey",
    ],
    "type": "object",
  },
  "Label": {
    "properties": {
      "text": {
        "description": "Text displayed as the label for the field",
        "type": "string",
      },
    },
    "type": "object",
  },
  "NestableDef": {
    "additionalProperties": true,
    "type": "object",
  },
  "PackageModel": {
    "description": "The PackageModel describes how the Vega Runtime will resolve dependencies",
    "properties": {
      "type": {
        "description": "Type of package",
        "type": "string",
      },
      "url": {
        "description": "URL of package",
        "type": "string",
      },
      "version": {
        "description": "Version of package",
        "type": "string",
      },
    },
    "type": "object",
  },
  "StylingModel": {
    "description": "Holds information for targeted styling of the component.",
    "properties": {
      "targets": {
        "type": "object",
      },
    },
    "type": "object",
  },
  "Validation": {
    "description": "Holds the validation rules and the most current validation results for the component",
    "properties": {
      "isDirty": {
        "description": "Whether or not field has had user interaction. It will be set to true on user interaction.",
        "type": "boolean",
      },
      "result": {
        "$ref": "#/definitions/ValidationResult",
      },
      "rules": {
        "description": "The set of rules to restrict or define the accepted data for the current component. These are the rules to run for validation of the data input.",
        "examples": [
          "You can use it to define the max length of characters in an input field with a custom error message. rules: { required: { type: ValidationRuleTypes.MAX_LENGTH, validation: { maxLength: 5, }, errorMessage: 'Max length is 5', }, },",
        ],
        "type": "object",
      },
    },
    "type": "object",
  },
  "ValidationError": {
    "properties": {
      "message": {
        "description": "The error message",
        "type": "string",
      },
      "type": {
        "description": "Type of the error",
        "enum": [
          "required",
          "maxLength",
          "minLength",
          "arrayMinLength",
          "arrayMaxLength",
          "pattern",
          "min",
          "max",
          "mask",
          "number",
          "dateinput",
          "isBeforeDate",
          "isAfterDate",
          "customError",
          "isEmail",
        ],
        "minLength": 1,
        "type": "string",
      },
    },
    "required": [
      "type",
    ],
    "type": "object",
  },
  "ValidationResult": {
    "properties": {
      "errors": {
        "items": {
          "$ref": "#/definitions/ValidationError",
        },
        "type": "array",
      },
      "isValid": {
        "type": [
          "null",
          "boolean",
        ],
      },
    },
    "type": "object",
  },
}
`;
