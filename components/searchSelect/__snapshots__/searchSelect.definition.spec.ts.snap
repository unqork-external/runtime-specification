// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SearchSelect Contract Tests should ensure the contract is clear 1`] = `
[
  "key",
  "type",
]
`;

exports[`SearchSelect Contract Tests should ensure the contract is clear 2`] = `
{
  "display": {
    "$ref": "#/definitions/Display",
  },
  "executable": {
    "default": true,
    "description": "Defines whether or not the object will respond to events or fire operations. When \`true\`, the object will perform and behave as defined in its spec. When \`false\`, the object will no longer be responsive to the system.",
    "type": "boolean",
  },
  "field": {
    "$ref": "#/definitions/SearchSelectField",
  },
  "inputs": {
    "items": {
      "$ref": "#/definitions/InputRef",
    },
    "type": "array",
  },
  "key": {
    "description": "'key' is the user-defined, unique identifier for an object within a module. It doesn't have to be unique across different modules. Objects within the runtime use keys to target other objects.",
    "examples": [
      "I am the key",
      "bestKeyEver",
    ],
    "minLength": 1,
    "type": "string",
  },
  "nestables": {
    "description": "Nestable definitions for Search Select component",
    "type": "object",
  },
  "optionKeys": {
    "description": "Fully qualified child keys for options nestables. Maintained by nestable api.",
    "type": "array",
  },
  "options": {
    "description": "Nested option component definition.",
    "items": {
      "$ref": "#/definitions/SearchSelectOptionComponentDefinition",
    },
    "type": "array",
  },
  "package": {
    "$ref": "#/definitions/PackageModel",
  },
  "selected": {
    "description": "Fully qualified child keys for selectedOptions nestables. Maintained by nestable api.",
    "type": "array",
  },
  "selectedOptions": {
    "description": "Nested selected option component definitions",
    "items": {
      "$ref": "#/definitions/BaseComponentDefinition",
    },
    "type": "array",
  },
  "signals": {
    "description": "An object which contains all of the signals for the component. The signals object can have any number of target keys as defined in the component definition which each contain an array of Signals.",
    "examples": [
      {
        "args": {
          "inputs": {
            "propertyPath": "value",
            "required": true,
            "targetKey": "firstName",
          },
        },
        "id": "firstNameWatcher",
        "operations": [
          {
            "options": {
              "logType": "warn",
              "thingToPrint": "firstNameWatcher operations fired: value watcher triggered",
            },
            "type": "PRINTER",
          },
        ],
        "type": "onWatch",
      },
      {
        "id": "textfieldOnBlur",
        "operations": [
          {
            "options": {
              "logType": "warn",
              "thingToPrint": "textfield received blur event from DOM",
            },
            "type": "PRINTER",
          },
        ],
        "type": "onBlur",
      },
      "<Example> Prompt: "I want a textfield that will trigger the root execute signal on myValidationComponent when the textfield input receives a blur event." Response: [{"key":"yourGeneratedTextfield","type":"textfield","signals":{"input":[{"id":"textfieldOnBlur","operations":[{"type":"EXECUTE","options":{"targetKey":"myValidationComponent","signalTarget":"root","shouldExecute":true}}],"type":"onBlur"}]}}] </Example>",
    ],
    "type": "object",
  },
  "simpleView": {
    "$ref": "#/definitions/SearchSelectSimpleViewModel",
  },
  "styling": {
    "$ref": "#/definitions/SearchSelectStyling",
  },
  "type": {
    "const": "searchSelect",
    "description": "Name of the type of component.",
    "examples": [
      "searchSelect",
    ],
    "minLength": 1,
    "type": "string",
  },
  "useSimpleView": {
    "default": false,
    "description": "Boolean used to determine if the underlying view is simple and un-styled",
    "type": "boolean",
  },
  "validation": {
    "$ref": "#/definitions/Validation",
  },
  "value": {
    "description": "Value of the Search Select.",
    "type": "object",
  },
}
`;

exports[`SearchSelect Contract Tests should ensure the contract is clear 3`] = `
{
  "BaseComponentDefinition": {
    "description": "Base Component Definition is the fundamental interface any component that wishes to leverage the runtime must follow. It is the agreed upon contract between the Runtime and anything that should be recognized as a component.",
    "properties": {
      "executable": {
        "default": true,
        "description": "Defines whether or not the object will respond to events or fire operations. When \`true\`, the object will perform and behave as defined in its spec. When \`false\`, the object will no longer be responsive to the system.",
        "type": "boolean",
      },
      "inputs": {
        "items": {
          "$ref": "#/definitions/InputRef",
        },
        "type": "array",
      },
      "key": {
        "description": "'key' is the user-defined, unique identifier for an object within a module. It doesn't have to be unique across different modules. Objects within the runtime use keys to target other objects.",
        "examples": [
          "I am the key",
          "bestKeyEver",
        ],
        "minLength": 1,
        "type": "string",
      },
      "package": {
        "$ref": "#/definitions/PackageModel",
      },
      "signals": {
        "description": "An object which contains all of the signals for the component. The signals object can have any number of target keys as defined in the component definition which each contain an array of Signals.",
        "examples": [
          {
            "args": {
              "inputs": {
                "propertyPath": "value",
                "required": true,
                "targetKey": "firstName",
              },
            },
            "id": "firstNameWatcher",
            "operations": [
              {
                "options": {
                  "logType": "warn",
                  "thingToPrint": "firstNameWatcher operations fired: value watcher triggered",
                },
                "type": "PRINTER",
              },
            ],
            "type": "onWatch",
          },
          {
            "id": "textfieldOnBlur",
            "operations": [
              {
                "options": {
                  "logType": "warn",
                  "thingToPrint": "textfield received blur event from DOM",
                },
                "type": "PRINTER",
              },
            ],
            "type": "onBlur",
          },
          "<Example> Prompt: "I want a textfield that will trigger the root execute signal on myValidationComponent when the textfield input receives a blur event." Response: [{"key":"yourGeneratedTextfield","type":"textfield","signals":{"input":[{"id":"textfieldOnBlur","operations":[{"type":"EXECUTE","options":{"targetKey":"myValidationComponent","signalTarget":"root","shouldExecute":true}}],"type":"onBlur"}]}}] </Example>",
        ],
        "type": "object",
      },
      "styling": {
        "$ref": "#/definitions/StylingModel",
      },
      "type": {
        "description": "Name of the type of component.",
        "minLength": 1,
        "type": "string",
      },
      "validation": {
        "$ref": "#/definitions/Validation",
      },
      "value": {
        "description": "Current value of the component",
        "type": [
          "null",
          "integer",
          "number",
          "string",
          "boolean",
          "array",
          "object",
        ],
      },
    },
    "required": [
      "key",
      "type",
    ],
    "type": "object",
  },
  "Display": {
    "description": "Basic UI settings related to how a component may be displayed and interacted with. 'Hidden' corresponds to visibility. 'Interactive' corresponds to the end-user's ability to interact with input components. 'Read Only View' corresponds to the component being rendered with an input element or as text.",
    "properties": {
      "hidden": {
        "default": false,
        "description": "Setting it to \`true\` hides the component from the view, while \`false\` shows it. Regardless of this setting, the component is always visible in the Module Editor. A hidden component can still receive information from other components.",
        "type": "boolean",
      },
      "interactive": {
        "default": true,
        "description": "When \`false\`, it is not possible to interact with or edit the input field. Its appearance is modified (grayed-out by default) to show its state, the HTML 'disabled' attribute is added to the field, and when hovering over it, the cursor also changes to alert of the disabled status. However, the component can still receive information from other components when it's not interactive.",
        "type": "boolean",
      },
      "readOnlyView": {
        "default": false,
        "description": "Defines how the component will be displayed. When \`false\`, the component is displayed as an input field. When \`true\`, the component will not accept any input from the user, and its value will be rendered inline as text and not as an input component. If no value is present, the word 'None' is rendered. If a prefix or suffix is set for the component, they also appear as inline text.",
        "type": "boolean",
      },
    },
    "type": "object",
  },
  "Field": {
    "properties": {
      "label": {
        "$ref": "#/definitions/Label",
      },
    },
    "type": "object",
  },
  "IconComponentDefinition": {
    "description": "Root Object is the base object from which all other Specification objects inherit properties.",
    "properties": {
      "executable": {
        "default": true,
        "description": "Defines whether or not the object will respond to events or fire operations. When \`true\`, the object will perform and behave as defined in its spec. When \`false\`, the object will no longer be responsive to the system.",
        "type": "boolean",
      },
      "inputs": {
        "items": {
          "$ref": "#/definitions/InputRef",
        },
        "type": "array",
      },
      "key": {
        "description": "'key' is the user-defined, unique identifier for an object within a module. It doesn't have to be unique across different modules. Objects within the runtime use keys to target other objects.",
        "examples": [
          "I am the key",
          "bestKeyEver",
        ],
        "minLength": 1,
        "type": "string",
      },
      "package": {
        "$ref": "#/definitions/PackageModel",
      },
      "signals": {
        "description": "An object which contains all of the signals for the component. The signals object can have any number of target keys as defined in the component definition which each contain an array of Signals.",
        "examples": [
          {
            "args": {
              "inputs": {
                "propertyPath": "value",
                "required": true,
                "targetKey": "firstName",
              },
            },
            "id": "firstNameWatcher",
            "operations": [
              {
                "options": {
                  "logType": "warn",
                  "thingToPrint": "firstNameWatcher operations fired: value watcher triggered",
                },
                "type": "PRINTER",
              },
            ],
            "type": "onWatch",
          },
          {
            "id": "textfieldOnBlur",
            "operations": [
              {
                "options": {
                  "logType": "warn",
                  "thingToPrint": "textfield received blur event from DOM",
                },
                "type": "PRINTER",
              },
            ],
            "type": "onBlur",
          },
          "<Example> Prompt: "I want a textfield that will trigger the root execute signal on myValidationComponent when the textfield input receives a blur event." Response: [{"key":"yourGeneratedTextfield","type":"textfield","signals":{"input":[{"id":"textfieldOnBlur","operations":[{"type":"EXECUTE","options":{"targetKey":"myValidationComponent","signalTarget":"root","shouldExecute":true}}],"type":"onBlur"}]}}] </Example>",
        ],
        "type": "object",
      },
      "source": {
        "description": "String representing the source of the icon. For url, this should be a fully qualified url to the hosted icon image. For fontAwesome, this should be a string describing the fontAwesome classes. For cssIcon, this string should be the css class definitions to apply.",
        "minLength": 1,
        "type": "string",
      },
      "sourceType": {
        "description": "sourceType determines how the icon is sourced. If url, a valid url must also be defined in source.",
        "enum": [
          "fontAwesome",
          "url",
          "css",
        ],
        "minLength": 1,
        "type": "string",
      },
      "styling": {
        "$ref": "#/definitions/StylingModel",
      },
      "type": {
        "const": "icon",
        "description": "Name of the type of component.",
        "examples": [
          "icon",
        ],
        "minLength": 1,
        "type": "string",
      },
      "validation": {
        "$ref": "#/definitions/Validation",
      },
      "value": {
        "description": "Current value of the component",
        "type": [
          "null",
          "integer",
          "number",
          "string",
          "boolean",
          "array",
          "object",
        ],
      },
    },
    "required": [
      "key",
      "type",
      "sourceType",
      "source",
    ],
    "type": "object",
  },
  "InputRef": {
    "description": "Objects may define other targets that they refer to. This becomes a link for operation execution within the Runtime.",
    "properties": {
      "alias": {
        "type": "string",
      },
      "propertyPath": {
        "type": "string",
      },
      "required": {
        "type": "boolean",
      },
      "silent": {
        "type": "boolean",
      },
      "targetKey": {
        "minLength": 1,
        "type": "string",
      },
      "type": {
        "type": "string",
      },
    },
    "required": [
      "targetKey",
    ],
    "type": "object",
  },
  "Label": {
    "properties": {
      "text": {
        "description": "Text displayed as the label for the field",
        "type": "string",
      },
    },
    "type": "object",
  },
  "OptionAdornments": {
    "properties": {
      "left": {
        "description": "Left Icon definition.",
        "items": {
          "$ref": "#/definitions/IconComponentDefinition",
        },
        "type": "array",
      },
      "right": {
        "description": "Right Icon definition.",
        "items": {
          "$ref": "#/definitions/IconComponentDefinition",
        },
        "type": "array",
      },
    },
    "type": "object",
  },
  "PackageModel": {
    "description": "The PackageModel describes how the Vega Runtime will resolve dependencies",
    "properties": {
      "type": {
        "description": "Type of package",
        "type": "string",
      },
      "url": {
        "description": "URL of package",
        "type": "string",
      },
      "version": {
        "description": "Version of package",
        "type": "string",
      },
    },
    "type": "object",
  },
  "SearchSelectField": {
    "properties": {
      "disablePortal": {
        "default": false,
        "description": "When "true", children stay within parent DOM hierarchy. When "false", popup element is attached to HTML body as a React Portal",
        "type": "boolean",
      },
      "label": {
        "$ref": "#/definitions/SearchSelectLabel",
      },
      "multiple": {
        "default": false,
        "description": "Allows multiple values to be entered for this field.",
        "type": "boolean",
      },
      "placeholder": {
        "description": "Adds placeholder inside of input",
        "type": "string",
      },
    },
    "type": "object",
  },
  "SearchSelectLabel": {
    "properties": {
      "hidden": {
        "description": "Hide label of the component",
        "type": "boolean",
      },
      "text": {
        "description": "Label text.",
        "type": "string",
      },
    },
    "type": "object",
  },
  "SearchSelectOptionComponentDefinition": {
    "description": "Root Object is the base object from which all other Specification objects inherit properties.",
    "properties": {
      "adornments": {
        "$ref": "#/definitions/OptionAdornments",
      },
      "display": {
        "$ref": "#/definitions/Display",
      },
      "executable": {
        "default": true,
        "description": "Defines whether or not the object will respond to events or fire operations. When \`true\`, the object will perform and behave as defined in its spec. When \`false\`, the object will no longer be responsive to the system.",
        "type": "boolean",
      },
      "field": {
        "$ref": "#/definitions/Field",
      },
      "inputs": {
        "items": {
          "$ref": "#/definitions/InputRef",
        },
        "type": "array",
      },
      "key": {
        "description": "'key' is the user-defined, unique identifier for an object within a module. It doesn't have to be unique across different modules. Objects within the runtime use keys to target other objects.",
        "examples": [
          "I am the key",
          "bestKeyEver",
        ],
        "minLength": 1,
        "type": "string",
      },
      "left": {
        "description": "Fully qualified child keys for left icon nestables. Maintained by nestable api.",
        "items": {
          "default": [],
        },
        "type": "array",
      },
      "nestables": {
        "description": "Nestable definitions for the component",
        "type": "object",
      },
      "package": {
        "$ref": "#/definitions/PackageModel",
      },
      "right": {
        "description": "Fully qualified child keys for right icon nestables. Maintained by nestable api.",
        "items": {
          "default": [],
        },
        "type": "array",
      },
      "signals": {
        "description": "An object which contains all of the signals for the component. The signals object can have any number of target keys as defined in the component definition which each contain an array of Signals.",
        "examples": [
          {
            "args": {
              "inputs": {
                "propertyPath": "value",
                "required": true,
                "targetKey": "firstName",
              },
            },
            "id": "firstNameWatcher",
            "operations": [
              {
                "options": {
                  "logType": "warn",
                  "thingToPrint": "firstNameWatcher operations fired: value watcher triggered",
                },
                "type": "PRINTER",
              },
            ],
            "type": "onWatch",
          },
          {
            "id": "textfieldOnBlur",
            "operations": [
              {
                "options": {
                  "logType": "warn",
                  "thingToPrint": "textfield received blur event from DOM",
                },
                "type": "PRINTER",
              },
            ],
            "type": "onBlur",
          },
          "<Example> Prompt: "I want a textfield that will trigger the root execute signal on myValidationComponent when the textfield input receives a blur event." Response: [{"key":"yourGeneratedTextfield","type":"textfield","signals":{"input":[{"id":"textfieldOnBlur","operations":[{"type":"EXECUTE","options":{"targetKey":"myValidationComponent","signalTarget":"root","shouldExecute":true}}],"type":"onBlur"}]}}] </Example>",
        ],
        "type": "object",
      },
      "styling": {
        "$ref": "#/definitions/SearchSelectOptionStyling",
      },
      "type": {
        "const": "searchSelectOption",
        "description": "Name of the type of component.",
        "examples": [
          "searchSelectOption",
        ],
        "minLength": 1,
        "type": "string",
      },
      "validation": {
        "$ref": "#/definitions/Validation",
      },
      "value": {
        "description": "Current value of the component",
        "minLength": 1,
        "type": "string",
      },
    },
    "required": [
      "key",
      "type",
      "value",
    ],
    "type": "object",
  },
  "SearchSelectOptionStyleTargets": {
    "properties": {
      "option": {
        "description": "Adds styles to Search Select Option field.",
        "type": [
          "string",
          "object",
        ],
      },
      "root": {
        "description": "Adds styles to Search Select Option root element.",
        "type": [
          "string",
          "object",
        ],
      },
    },
    "type": "object",
  },
  "SearchSelectOptionStyling": {
    "description": "Holds information for targeted styling of the component.",
    "properties": {
      "targets": {
        "$ref": "#/definitions/SearchSelectOptionStyleTargets",
        "type": "object",
      },
    },
    "type": "object",
  },
  "SearchSelectSimpleViewModel": {
    "properties": {
      "inEditMode": {
        "description": "When set to "true", the component should allow users input data. When set to "false", the component will render as an unstyled readonly Typography.",
        "type": "boolean",
      },
    },
    "type": "object",
  },
  "SearchSelectStyleTargets": {
    "properties": {
      "customPopper": {
        "description": "Adds styles to Search Select's custom popper.",
        "type": [
          "string",
          "object",
        ],
      },
      "errorsFieldError": {
        "description": "Adds styles to Search Select's each FieldError sub-component in Errors",
        "type": [
          "string",
          "object",
        ],
      },
      "errorsRoot": {
        "description": "Adds styles to Search Select's root of the Errors sub-component",
        "type": [
          "string",
          "object",
        ],
      },
      "errorsUnorderedList": {
        "description": "Adds styles to Search Select UL HTML element in the Errors sub-component",
        "type": [
          "string",
          "object",
        ],
      },
      "errorsUnorderedListItem": {
        "description": "Adds styles to Search Select's each LI HTML element in the Errors sub-component",
        "type": [
          "string",
          "object",
        ],
      },
      "input": {
        "description": "Adds styles to Search Select's input field.",
        "type": [
          "string",
          "object",
        ],
      },
      "label": {
        "description": "Adds styles to Search Select's label.",
        "type": [
          "string",
          "object",
        ],
      },
      "readOnly": {
        "description": "Adds styles to Search Select's read only text.",
        "type": [
          "string",
          "object",
        ],
      },
      "root": {
        "description": "Adds styles to Search Select's ComponentWrapper.",
        "type": [
          "string",
          "object",
        ],
      },
      "searchInput": {
        "description": "Adds styles to Search Select's search input.",
        "type": [
          "string",
          "object",
        ],
      },
      "tag": {
        "description": "Adds styles to Search Select's selected value tag.",
        "type": [
          "string",
          "object",
        ],
      },
    },
    "type": "object",
  },
  "SearchSelectStyling": {
    "description": "Holds information for targeted styling of the component.",
    "properties": {
      "targets": {
        "$ref": "#/definitions/SearchSelectStyleTargets",
        "type": "object",
      },
    },
    "type": "object",
  },
  "StylingModel": {
    "description": "Holds information for targeted styling of the component.",
    "properties": {
      "targets": {
        "type": "object",
      },
    },
    "type": "object",
  },
  "Validation": {
    "description": "Holds the validation rules and the most current validation results for the component",
    "properties": {
      "isDirty": {
        "description": "Whether or not field has had user interaction. It will be set to true on user interaction.",
        "type": "boolean",
      },
      "result": {
        "$ref": "#/definitions/ValidationResult",
      },
      "rules": {
        "description": "The set of rules to restrict or define the accepted data for the current component. These are the rules to run for validation of the data input.",
        "examples": [
          "You can use it to define the max length of characters in an input field with a custom error message. rules: { required: { type: ValidationRuleTypes.MAX_LENGTH, validation: { maxLength: 5, }, errorMessage: 'Max length is 5', }, },",
        ],
        "type": "object",
      },
    },
    "type": "object",
  },
  "ValidationError": {
    "properties": {
      "message": {
        "description": "The error message",
        "type": "string",
      },
      "type": {
        "description": "Type of the error",
        "enum": [
          "required",
          "maxLength",
          "minLength",
          "arrayMinLength",
          "arrayMaxLength",
          "pattern",
          "min",
          "max",
          "mask",
          "number",
          "dateinput",
          "isBeforeDate",
          "isAfterDate",
          "customError",
          "isEmail",
        ],
        "minLength": 1,
        "type": "string",
      },
    },
    "required": [
      "type",
    ],
    "type": "object",
  },
  "ValidationResult": {
    "properties": {
      "errors": {
        "items": {
          "$ref": "#/definitions/ValidationError",
        },
        "type": "array",
      },
      "isValid": {
        "type": [
          "null",
          "boolean",
        ],
      },
    },
    "type": "object",
  },
}
`;
