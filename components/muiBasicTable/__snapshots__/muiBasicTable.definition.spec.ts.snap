// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MuiBasicTable Contract Tests should ensure the contract is clear 1`] = `
[
  "key",
  "type",
]
`;

exports[`MuiBasicTable Contract Tests should ensure the contract is clear 2`] = `
{
  "addRowOnInit": {
    "type": "boolean",
  },
  "columnComponents": {
    "description": "A record mapping column keys to column definitions",
    "type": "object",
  },
  "columnFilters": {
    "items": {
      "$ref": "#/definitions/ColumnFilter",
    },
    "type": "array",
  },
  "columnHeaders": {
    "type": "array",
  },
  "columnPinning": {
    "$ref": "#/definitions/ColumnPinningState",
  },
  "columnState": {
    "$ref": "#/definitions/ColumnState",
  },
  "columnVisibility": {
    "type": "object",
  },
  "columns": {
    "type": "array",
  },
  "customClass": {
    "type": "string",
  },
  "display": {
    "$ref": "#/definitions/Display",
  },
  "enableBottomToolbar": {
    "type": "boolean",
  },
  "enableColumnActions": {
    "type": "boolean",
  },
  "enableColumnFilters": {
    "description": "Allows column filters to be applied to the Table component, and displays the column filter icon in the Toolbar.",
    "type": "boolean",
  },
  "enableColumnOrdering": {
    "type": "boolean",
  },
  "enableColumnPinning": {
    "type": "boolean",
  },
  "enableColumnResizing": {
    "type": "boolean",
  },
  "enableFacetedValues": {
    "default": true,
    "description": "enable the MRT to scan the data and automatically generate filter options",
    "type": "boolean",
  },
  "enableGlobalFilter": {
    "description": "Allows global filters to be applied to the Table component, and displays the global filter search icon in the Toolbar.",
    "type": "boolean",
  },
  "enableGrouping": {
    "type": "boolean",
  },
  "enablePagination": {
    "type": "boolean",
  },
  "enableRowPinning": {
    "default": false,
    "type": "boolean",
  },
  "enableRowSelection": {
    "type": "boolean",
  },
  "enableTopToolbar": {
    "type": "boolean",
  },
  "executable": {
    "default": true,
    "description": "Defines whether or not the object will respond to events or fire operations. When \`true\`, the object will perform and behave as defined in its spec. When \`false\`, the object will no longer be responsive to the system.",
    "type": "boolean",
  },
  "field": {
    "$ref": "#/definitions/MuiBasicTableField",
  },
  "globalFilter": {
    "type": "string",
  },
  "groupBy": {
    "type": "array",
  },
  "hideGroupedColumns": {
    "description": "When columns are grouped, grouped columns are shifted to the left. This setting hides grouped columns implicitly. Note: When columns are hidden, they are not invisible - that is - their children still render, can be sorted, can be interacted with. If a column in invisible, their children do not render.",
    "type": "boolean",
  },
  "ignoreValueUpdate": {
    "type": "string",
  },
  "initialData": {
    "type": "array",
  },
  "inputs": {
    "items": {
      "$ref": "#/definitions/InputRef",
    },
    "type": "array",
  },
  "isExpanded": {
    "type": "boolean",
  },
  "isTableFullScreen": {
    "type": "boolean",
  },
  "keepPinnedRows": {
    "description": "When \`false\`, pinned rows will not be visible if they are filtered or paginated out of the table. When \`true\`, pinned rows will always be visible regardless of filtering or pagination.",
    "type": "boolean",
  },
  "key": {
    "description": "'key' is the user-defined, unique identifier for an object within a module. It doesn't have to be unique across different modules. Objects within the runtime use keys to target other objects.",
    "examples": [
      "I am the key",
      "bestKeyEver",
    ],
    "minLength": 1,
    "type": "string",
  },
  "label": {
    "type": "string",
  },
  "navigateDownOnPressEnter": {
    "description": "This only has effect in edit mode. When enabled, users have the ability to press enter and put the focus on the cell that is below the current selection. When disabled, it exits the edit mode.",
    "type": "boolean",
  },
  "nestables": {
    "type": "object",
  },
  "package": {
    "$ref": "#/definitions/PackageModel",
  },
  "pagination": {
    "$ref": "#/definitions/PaginationState",
  },
  "rowComponents": {
    "items": {
      "$ref": "#/definitions/BaseComponentDefinition",
    },
    "type": "array",
  },
  "rowPinning": {
    "$ref": "#/definitions/RowPinningState",
  },
  "rowPinningDisplayMode": {
    "enum": [
      "sticky",
      "top",
      "bottom",
      "top-and-bottom",
      "select-sticky",
      "select-top",
      "select-bottom",
    ],
    "type": "string",
  },
  "rowState": {
    "$ref": "#/definitions/RowState",
  },
  "rows": {
    "type": "array",
  },
  "selectedRows": {
    "$ref": "#/definitions/RowSelection",
  },
  "signals": {
    "description": "An object which contains all of the signals for the component. The signals object can have any number of target keys as defined in the component definition which each contain an array of Signals.",
    "examples": [
      {
        "args": {
          "inputs": {
            "propertyPath": "value",
            "required": true,
            "targetKey": "firstName",
          },
        },
        "id": "firstNameWatcher",
        "operations": [
          {
            "options": {
              "logType": "warn",
              "thingToPrint": "firstNameWatcher operations fired: value watcher triggered",
            },
            "type": "PRINTER",
          },
        ],
        "type": "onWatch",
      },
      {
        "id": "textfieldOnBlur",
        "operations": [
          {
            "options": {
              "logType": "warn",
              "thingToPrint": "textfield received blur event from DOM",
            },
            "type": "PRINTER",
          },
        ],
        "type": "onBlur",
      },
      "<Example> Prompt: "I want a textfield that will trigger the root execute signal on myValidationComponent when the textfield input receives a blur event." Response: [{"key":"yourGeneratedTextfield","type":"textfield","signals":{"input":[{"id":"textfieldOnBlur","operations":[{"type":"EXECUTE","options":{"targetKey":"myValidationComponent","signalTarget":"root","shouldExecute":true}}],"type":"onBlur"}]}}] </Example>",
    ],
    "type": "object",
  },
  "sortState": {
    "type": "array",
  },
  "styling": {
    "$ref": "#/definitions/TableStyling",
  },
  "toolbarState": {
    "description": "state data for the toolbar",
    "type": "object",
  },
  "type": {
    "const": "muiBasicTable",
    "description": "Name of the type of component.",
    "examples": [
      "muiBasicTable",
    ],
    "minLength": 1,
    "type": "string",
  },
  "validation": {
    "$ref": "#/definitions/Validation",
  },
  "value": {
    "description": "Current value of the component",
    "type": "array",
  },
  "viewType": {
    "default": "spreadsheet",
    "enum": [
      "form",
      "spreadsheet",
    ],
    "type": "string",
  },
}
`;

exports[`MuiBasicTable Contract Tests should ensure the contract is clear 3`] = `
{
  "BaseComponentDefinition": {
    "description": "Base Component Definition is the fundamental interface any component that wishes to leverage the runtime must follow. It is the agreed upon contract between the Runtime and anything that should be recognized as a component.",
    "properties": {
      "executable": {
        "default": true,
        "description": "Defines whether or not the object will respond to events or fire operations. When \`true\`, the object will perform and behave as defined in its spec. When \`false\`, the object will no longer be responsive to the system.",
        "type": "boolean",
      },
      "inputs": {
        "items": {
          "$ref": "#/definitions/InputRef",
        },
        "type": "array",
      },
      "key": {
        "description": "'key' is the user-defined, unique identifier for an object within a module. It doesn't have to be unique across different modules. Objects within the runtime use keys to target other objects.",
        "examples": [
          "I am the key",
          "bestKeyEver",
        ],
        "minLength": 1,
        "type": "string",
      },
      "package": {
        "$ref": "#/definitions/PackageModel",
      },
      "signals": {
        "description": "An object which contains all of the signals for the component. The signals object can have any number of target keys as defined in the component definition which each contain an array of Signals.",
        "examples": [
          {
            "args": {
              "inputs": {
                "propertyPath": "value",
                "required": true,
                "targetKey": "firstName",
              },
            },
            "id": "firstNameWatcher",
            "operations": [
              {
                "options": {
                  "logType": "warn",
                  "thingToPrint": "firstNameWatcher operations fired: value watcher triggered",
                },
                "type": "PRINTER",
              },
            ],
            "type": "onWatch",
          },
          {
            "id": "textfieldOnBlur",
            "operations": [
              {
                "options": {
                  "logType": "warn",
                  "thingToPrint": "textfield received blur event from DOM",
                },
                "type": "PRINTER",
              },
            ],
            "type": "onBlur",
          },
          "<Example> Prompt: "I want a textfield that will trigger the root execute signal on myValidationComponent when the textfield input receives a blur event." Response: [{"key":"yourGeneratedTextfield","type":"textfield","signals":{"input":[{"id":"textfieldOnBlur","operations":[{"type":"EXECUTE","options":{"targetKey":"myValidationComponent","signalTarget":"root","shouldExecute":true}}],"type":"onBlur"}]}}] </Example>",
        ],
        "type": "object",
      },
      "styling": {
        "$ref": "#/definitions/StylingModel",
      },
      "type": {
        "description": "Name of the type of component.",
        "minLength": 1,
        "type": "string",
      },
      "validation": {
        "$ref": "#/definitions/Validation",
      },
      "value": {
        "description": "Current value of the component",
        "type": [
          "null",
          "integer",
          "number",
          "string",
          "boolean",
          "array",
          "object",
        ],
      },
    },
    "required": [
      "key",
      "type",
    ],
    "type": "object",
  },
  "ColumnFilter": {
    "properties": {
      "id": {
        "description": "ID of the column to filter",
        "minLength": 1,
        "type": "string",
      },
      "value": {
        "description": "Value of the filter",
        "minLength": 1,
        "type": [
          "string",
          "number",
          "boolean",
          "object",
          "array",
        ],
      },
    },
    "required": [
      "id",
      "value",
    ],
    "type": "object",
  },
  "ColumnPinningState": {
    "properties": {
      "left": {
        "description": "List of columns to pin to the left of the Table component.",
        "items": {
          "default": [],
          "type": "string",
        },
        "type": "array",
      },
      "right": {
        "description": "List of columns to pin to the right of the Table component.",
        "items": {
          "default": [],
          "type": "string",
        },
        "type": "array",
      },
    },
    "type": "object",
  },
  "ColumnState": {
    "properties": {
      "aggregation": {
        "description": "a map for column aggregation data",
        "type": "object",
      },
      "showColumnFilters": {
        "description": "boolean to handle showing or hiding column filters",
        "type": "boolean",
      },
    },
    "type": "object",
  },
  "Display": {
    "description": "Basic UI settings related to how a component may be displayed and interacted with. 'Hidden' corresponds to visibility. 'Interactive' corresponds to the end-user's ability to interact with input components. 'Read Only View' corresponds to the component being rendered with an input element or as text.",
    "properties": {
      "hidden": {
        "default": false,
        "description": "Setting it to \`true\` hides the component from the view, while \`false\` shows it. Regardless of this setting, the component is always visible in the Module Editor. A hidden component can still receive information from other components.",
        "type": "boolean",
      },
      "interactive": {
        "default": true,
        "description": "When \`false\`, it is not possible to interact with or edit the input field. Its appearance is modified (grayed-out by default) to show its state, the HTML 'disabled' attribute is added to the field, and when hovering over it, the cursor also changes to alert of the disabled status. However, the component can still receive information from other components when it's not interactive.",
        "type": "boolean",
      },
      "readOnlyView": {
        "default": false,
        "description": "Defines how the component will be displayed. When \`false\`, the component is displayed as an input field. When \`true\`, the component will not accept any input from the user, and its value will be rendered inline as text and not as an input component. If no value is present, the word 'None' is rendered. If a prefix or suffix is set for the component, they also appear as inline text.",
        "type": "boolean",
      },
    },
    "type": "object",
  },
  "InputRef": {
    "description": "Objects may define other targets that they refer to. This becomes a link for operation execution within the Runtime.",
    "properties": {
      "alias": {
        "type": "string",
      },
      "propertyPath": {
        "type": "string",
      },
      "required": {
        "type": "boolean",
      },
      "silent": {
        "type": "boolean",
      },
      "targetKey": {
        "minLength": 1,
        "type": "string",
      },
      "type": {
        "type": "string",
      },
    },
    "required": [
      "targetKey",
    ],
    "type": "object",
  },
  "Label": {
    "properties": {
      "text": {
        "description": "Text displayed as the label for the field",
        "type": "string",
      },
    },
    "type": "object",
  },
  "MuiBasicTableField": {
    "properties": {
      "customClass": {
        "description": "Adds a custom CSS class to the component. This is useful for targeting this component to apply custom styles.",
        "type": "string",
      },
      "label": {
        "$ref": "#/definitions/Label",
      },
    },
    "type": "object",
  },
  "PackageModel": {
    "description": "The PackageModel describes how the Vega Runtime will resolve dependencies",
    "properties": {
      "type": {
        "description": "Type of package",
        "type": "string",
      },
      "url": {
        "description": "URL of package",
        "type": "string",
      },
      "version": {
        "description": "Version of package",
        "type": "string",
      },
    },
    "type": "object",
  },
  "PaginationState": {
    "properties": {
      "autoResetPageIndex": {
        "default": false,
        "description": "When set to "true" it will reset the page index to zero when sorting/filtering",
        "type": "object",
      },
      "manualPagination": {
        "default": false,
        "description": "When set to "true", it enables server-side pagination. In this case, the component will assume that the data that is passed to the Table already has had the pagination logic applied. Usually this would happen in an external API.",
        "type": "boolean",
      },
      "offset": {
        "default": 0,
        "description": "The position of the results set relative to 'pageIndex'. It's the result of 'pageIndex * pageSize'. Setting it from the configuration has no effect because it will always be derived from the above math.",
        "type": "object",
      },
      "pageIndex": {
        "default": 0,
        "description": "The zero-based index of the page to which the data should be navigated. This should be a non-negative integer where zero indicates the first page.",
        "type": "object",
      },
      "pageSize": {
        "default": 20,
        "description": "Number of rows per page",
        "type": "object",
      },
      "total": {
        "default": 0,
        "description": "Total number of rows on the dataset. This is automatically calculated by the Table except when manualPagination is "true"",
        "type": "object",
      },
    },
    "type": "object",
  },
  "RowPinningState": {
    "properties": {
      "bottom": {
        "description": "List of rows to pin to the bottom of the Table component.",
        "items": {
          "type": "string",
        },
        "type": "array",
      },
      "top": {
        "description": "List of rows to pin to the top of the Table component.",
        "items": {
          "type": "string",
        },
        "type": "array",
      },
    },
    "type": "object",
  },
  "RowSelection": {
    "type": "object",
  },
  "RowState": {
    "properties": {
      "rowDensity": {
        "default": "comfortable",
        "description": "an enum used to determine the className and styles provided for row width ",
        "enum": [
          "spacious",
          "comfortable",
          "compact",
        ],
        "type": "string",
      },
    },
    "type": "object",
  },
  "StylingModel": {
    "description": "Holds information for targeted styling of the component.",
    "properties": {
      "targets": {
        "type": "object",
      },
    },
    "type": "object",
  },
  "TableStyleTargets": {
    "properties": {
      "groupedCell": {
        "oneOf": [
          {
            "type": "string",
          },
          {
            "type": "object",
          },
          {
            "items": {
              "oneOf": [
                {
                  "type": "string",
                },
                {
                  "type": "object",
                },
              ],
            },
            "type": "array",
          },
        ],
      },
      "root": {
        "oneOf": [
          {
            "type": "string",
          },
          {
            "type": "object",
          },
          {
            "items": {
              "oneOf": [
                {
                  "type": "string",
                },
                {
                  "type": "object",
                },
              ],
            },
            "type": "array",
          },
        ],
      },
      "table": {
        "oneOf": [
          {
            "type": "string",
          },
          {
            "type": "object",
          },
          {
            "items": {
              "oneOf": [
                {
                  "type": "string",
                },
                {
                  "type": "object",
                },
              ],
            },
            "type": "array",
          },
        ],
      },
      "tableBody": {
        "oneOf": [
          {
            "type": "string",
          },
          {
            "type": "object",
          },
          {
            "items": {
              "oneOf": [
                {
                  "type": "string",
                },
                {
                  "type": "object",
                },
              ],
            },
            "type": "array",
          },
        ],
      },
      "tableBodyCell": {
        "oneOf": [
          {
            "type": "string",
          },
          {
            "type": "object",
          },
          {
            "items": {
              "oneOf": [
                {
                  "type": "string",
                },
                {
                  "type": "object",
                },
              ],
            },
            "type": "array",
          },
        ],
      },
      "tableBodyRow": {
        "oneOf": [
          {
            "type": "string",
          },
          {
            "type": "object",
          },
          {
            "items": {
              "oneOf": [
                {
                  "type": "string",
                },
                {
                  "type": "object",
                },
              ],
            },
            "type": "array",
          },
        ],
      },
      "tableContainer": {
        "oneOf": [
          {
            "type": "string",
          },
          {
            "type": "object",
          },
          {
            "items": {
              "oneOf": [
                {
                  "type": "string",
                },
                {
                  "type": "object",
                },
              ],
            },
            "type": "array",
          },
        ],
      },
      "tableHead": {
        "oneOf": [
          {
            "type": "string",
          },
          {
            "type": "object",
          },
          {
            "items": {
              "oneOf": [
                {
                  "type": "string",
                },
                {
                  "type": "object",
                },
              ],
            },
            "type": "array",
          },
        ],
      },
      "tableHeadCell": {
        "oneOf": [
          {
            "type": "string",
          },
          {
            "type": "object",
          },
          {
            "items": {
              "oneOf": [
                {
                  "type": "string",
                },
                {
                  "type": "object",
                },
              ],
            },
            "type": "array",
          },
        ],
      },
      "tableHeadRow": {
        "oneOf": [
          {
            "type": "string",
          },
          {
            "type": "object",
          },
          {
            "items": {
              "oneOf": [
                {
                  "type": "string",
                },
                {
                  "type": "object",
                },
              ],
            },
            "type": "array",
          },
        ],
      },
      "tablePaginationToolbar": {
        "oneOf": [
          {
            "type": "string",
          },
          {
            "type": "object",
          },
          {
            "items": {
              "oneOf": [
                {
                  "type": "string",
                },
                {
                  "type": "object",
                },
              ],
            },
            "type": "array",
          },
        ],
      },
      "tablePaginationToolbarSelect": {
        "oneOf": [
          {
            "type": "string",
          },
          {
            "type": "object",
          },
          {
            "items": {
              "oneOf": [
                {
                  "type": "string",
                },
                {
                  "type": "object",
                },
              ],
            },
            "type": "array",
          },
        ],
      },
      "tablePaginationToolbarSelectMenu": {
        "oneOf": [
          {
            "type": "string",
          },
          {
            "type": "object",
          },
          {
            "items": {
              "oneOf": [
                {
                  "type": "string",
                },
                {
                  "type": "object",
                },
              ],
            },
            "type": "array",
          },
        ],
      },
      "tablePaper": {
        "oneOf": [
          {
            "type": "string",
          },
          {
            "type": "object",
          },
          {
            "items": {
              "oneOf": [
                {
                  "type": "string",
                },
                {
                  "type": "object",
                },
              ],
            },
            "type": "array",
          },
        ],
      },
    },
    "type": "object",
  },
  "TableStyling": {
    "properties": {
      "targets": {
        "$ref": "#/definitions/TableStyleTargets",
      },
    },
    "type": "object",
  },
  "Validation": {
    "description": "Holds the validation rules and the most current validation results for the component",
    "properties": {
      "isDirty": {
        "description": "Whether or not field has had user interaction. It will be set to true on user interaction.",
        "type": "boolean",
      },
      "result": {
        "$ref": "#/definitions/ValidationResult",
      },
      "rules": {
        "description": "The set of rules to restrict or define the accepted data for the current component. These are the rules to run for validation of the data input.",
        "examples": [
          "You can use it to define the max length of characters in an input field with a custom error message. rules: { required: { type: ValidationRuleTypes.MAX_LENGTH, validation: { maxLength: 5, }, errorMessage: 'Max length is 5', }, },",
        ],
        "type": "object",
      },
    },
    "type": "object",
  },
  "ValidationError": {
    "properties": {
      "message": {
        "description": "The error message",
        "type": "string",
      },
      "type": {
        "description": "Type of the error",
        "enum": [
          "required",
          "maxLength",
          "minLength",
          "arrayMinLength",
          "arrayMaxLength",
          "pattern",
          "min",
          "max",
          "mask",
          "number",
          "dateinput",
          "isBeforeDate",
          "isAfterDate",
          "customError",
          "isEmail",
        ],
        "minLength": 1,
        "type": "string",
      },
    },
    "required": [
      "type",
    ],
    "type": "object",
  },
  "ValidationResult": {
    "properties": {
      "errors": {
        "items": {
          "$ref": "#/definitions/ValidationError",
        },
        "type": "array",
      },
      "isValid": {
        "type": [
          "null",
          "boolean",
        ],
      },
    },
    "type": "object",
  },
}
`;
