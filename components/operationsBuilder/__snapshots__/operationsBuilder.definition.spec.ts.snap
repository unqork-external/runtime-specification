// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`OperationsBuilder Contract Tests should ensure the contract is clear - component definition 1`] = `
[
  "key",
  "type",
  "visible",
  "signalTypes",
  "initialSignalTypes",
  "editMode",
  "operationIndex",
]
`;

exports[`OperationsBuilder Contract Tests should ensure the contract is clear - component definition 2`] = `
{
  "currentOperation": {
    "description": "The schema for selection operation's options",
    "type": "object",
  },
  "currentOperationKey": {
    "description": "The selected operation type that is being actively configured",
    "type": "string",
  },
  "currentOperationSummary": {
    "description": "The summary for current operation",
    "type": "string",
  },
  "currentSignal": {
    "description": "Event selected from Events list",
    "type": "object",
  },
  "editMode": {
    "default": false,
    "description": "Indicates that an operation is being edited and is an existing operation",
    "type": "boolean",
  },
  "executable": {
    "default": true,
    "description": "Defines whether or not the object will respond to events or fire operations. When \`true\`, the object will perform and behave as defined in its spec. When \`false\`, the object will no longer be responsive to the system.",
    "type": "boolean",
  },
  "initialSignalTypes": {
    "description": "List of initial event types",
    "examples": [
      {
        "description": "Occurs when an input component has lost focus.",
        "label": "On Blur",
        "value": "onBlur",
      },
      {
        "description": "Occurs on click of any UI component that is not disabled.",
        "label": "On Click",
        "value": "onClick",
      },
      "<Example> Prompt: "I want to build a component with signal types" Response: {"type":"operationsBuilder","signalTypes":[{"label":"On Blur","value":"onBlur","description":"Occurs when an input component has lost focus."},{"label":"On Click","value":"onClick","description":"Occurs on click of any UI component that is not disabled."}]} </Example>",
    ],
    "items": {
      "$ref": "#/definitions/SignalOption",
    },
    "type": "array",
  },
  "inputs": {
    "items": {
      "$ref": "#/definitions/InputRef",
    },
    "type": "array",
  },
  "key": {
    "description": "'key' is the user-defined, unique identifier for an object within a module. It doesn't have to be unique across different modules. Objects within the runtime use keys to target other objects.",
    "examples": [
      "I am the key",
      "bestKeyEver",
    ],
    "minLength": 1,
    "type": "string",
  },
  "nestables": {
    "description": "Nestable information for operations builder",
    "type": "object",
  },
  "operationIndex": {
    "default": -1,
    "description": "Index of the operation being edited",
    "type": "number",
  },
  "package": {
    "$ref": "#/definitions/PackageModel",
  },
  "readOnly": {
    "default": false,
    "description": "Sets Operations Builder to be in Readonly mode",
    "type": "boolean",
  },
  "selectedOperation": {
    "$ref": "#/definitions/MultiSelectOptionModel",
  },
  "selectedSignal": {
    "$ref": "#/definitions/MultiSelectOptionModel",
  },
  "showCloseButton": {
    "default": false,
    "description": "Show or Hide the Close button",
    "type": "boolean",
  },
  "signalTypes": {
    "description": "List of event types in dropdown list",
    "examples": [
      {
        "description": "Occurs when an input component has lost focus.",
        "label": "On Blur",
        "value": "onBlur",
      },
      {
        "description": "Occurs on click of any UI component that is not disabled.",
        "label": "On Click",
        "value": "onClick",
      },
      "<Example> Prompt: "I want to build a component with signal types" Response: {"type":"operationsBuilder","signalTypes":[{"label":"On Blur","value":"onBlur","description":"Occurs when an input component has lost focus."},{"label":"On Click","value":"onClick","description":"Occurs on click of any UI component that is not disabled."}]} </Example>",
    ],
    "items": {
      "$ref": "#/definitions/SignalOption",
    },
    "type": "array",
  },
  "signals": {
    "description": "An object which contains all of the signals for the component. The signals object can have any number of target keys as defined in the component definition which each contain an array of Signals.",
    "examples": [
      {
        "args": {
          "inputs": {
            "propertyPath": "value",
            "required": true,
            "targetKey": "firstName",
          },
        },
        "id": "firstNameWatcher",
        "operations": [
          {
            "options": {
              "logType": "warn",
              "thingToPrint": "firstNameWatcher operations fired: value watcher triggered",
            },
            "type": "PRINTER",
          },
        ],
        "type": "onWatch",
      },
      {
        "id": "textfieldOnBlur",
        "operations": [
          {
            "options": {
              "logType": "warn",
              "thingToPrint": "textfield received blur event from DOM",
            },
            "type": "PRINTER",
          },
        ],
        "type": "onBlur",
      },
      "<Example> Prompt: "I want a textfield that will trigger the root execute signal on myValidationComponent when the textfield input receives a blur event." Response: [{"key":"yourGeneratedTextfield","type":"textfield","signals":{"input":[{"id":"textfieldOnBlur","operations":[{"type":"EXECUTE","options":{"targetKey":"myValidationComponent","signalTarget":"root","shouldExecute":true}}],"type":"onBlur"}]}}] </Example>",
    ],
    "type": "object",
  },
  "styling": {
    "$ref": "#/definitions/OpsBuilderStyling",
  },
  "type": {
    "const": "operationsBuilder",
    "description": "Name of the type of component.",
    "examples": [
      "operationsBuilder",
    ],
    "minLength": 1,
    "type": "string",
  },
  "useDefaultStyles": {
    "default": false,
    "description": "Indicates whether to allow styles directly defined in the component",
    "type": "boolean",
  },
  "validation": {
    "$ref": "#/definitions/Validation",
  },
  "value": {
    "description": "Value of the Ops Builder component. Ops Builder always stores its data as a JSON object.",
    "examples": [
      {
        "args": {
          "inputs": {
            "propertyPath": "value",
            "required": true,
            "targetKey": "firstName",
          },
        },
        "id": "firstNameWatcher",
        "operations": [
          {
            "options": {
              "logType": "warn",
              "thingToPrint": "firstNameWatcher operations fired: value watcher triggered",
            },
            "type": "PRINTER",
          },
        ],
        "type": "onWatch",
      },
      {
        "id": "textfieldOnBlur",
        "operations": [
          {
            "options": {
              "logType": "warn",
              "thingToPrint": "textfield received blur event from DOM",
            },
            "type": "PRINTER",
          },
        ],
        "type": "onBlur",
      },
      "<Example> Prompt: "I want a textfield that will trigger the root execute signal on myValidationComponent when the textfield input receives a blur event." Response: [{"key":"yourGeneratedTextfield","type":"textfield","signals":{"input":[{"id":"textfieldOnBlur","operations":[{"type":"EXECUTE","options":{"targetKey":"myValidationComponent","signalTarget":"root","shouldExecute":true}}],"type":"onBlur"}]}}] </Example>",
    ],
    "type": "object",
  },
  "visible": {
    "default": false,
    "type": "boolean",
  },
}
`;

exports[`OperationsBuilder Contract Tests should ensure the contract is clear - component definition 3`] = `
{
  "InputRef": {
    "description": "Objects may define other targets that they refer to. This becomes a link for operation execution within the Runtime.",
    "properties": {
      "alias": {
        "type": "string",
      },
      "propertyPath": {
        "type": "string",
      },
      "required": {
        "type": "boolean",
      },
      "silent": {
        "type": "boolean",
      },
      "targetKey": {
        "minLength": 1,
        "type": "string",
      },
      "type": {
        "type": "string",
      },
    },
    "required": [
      "targetKey",
    ],
    "type": "object",
  },
  "MultiSelectOptionModel": {
    "properties": {
      "description": {
        "description": "Option description",
        "type": "string",
      },
      "label": {
        "description": "Option label",
        "minLength": 1,
        "type": "string",
      },
      "value": {
        "description": "Option value",
        "minLength": 1,
        "type": "string",
      },
    },
    "required": [
      "label",
      "value",
    ],
    "type": "object",
  },
  "OpsBuilderStyling": {
    "description": "An object containing styling for the component.",
    "examples": [
      {
        "styling": {
          "targets": {
            "root": [
              "very-fancy-custom-class",
              {
                "color": "red",
              },
              "another-custom-class",
            ],
          },
        },
      },
      "<Example> Prompt: "I want to be able to style the textfield component on root element with the style class 'very-fancy-custom-class', with red color and another style class 'another-custom-class'" Response: [{"key":"yourGeneratedTextfield","type":"textfield","styling":{"targets":{"root":["very-fancy-custom-class",{"color":"red"},"another-custom-class"]}}}] </Example>",
    ],
    "properties": {
      "targets": {
        "type": "object",
      },
    },
    "type": "object",
  },
  "PackageModel": {
    "description": "The PackageModel describes how the Vega Runtime will resolve dependencies",
    "properties": {
      "type": {
        "description": "Type of package",
        "type": "string",
      },
      "url": {
        "description": "URL of package",
        "type": "string",
      },
      "version": {
        "description": "Version of package",
        "type": "string",
      },
    },
    "type": "object",
  },
  "SignalOption": {
    "properties": {
      "description": {
        "description": "Option description",
        "type": "string",
      },
      "id": {
        "description": "Id of the Signal",
        "type": "string",
      },
      "label": {
        "description": "Option label",
        "minLength": 1,
        "type": "string",
      },
      "value": {
        "description": "Option value",
        "minLength": 1,
        "type": "string",
      },
    },
    "required": [
      "label",
      "value",
    ],
    "type": "object",
  },
  "StylingModel": {
    "description": "Holds information for targeted styling of the component.",
    "properties": {
      "targets": {
        "type": "object",
      },
    },
    "type": "object",
  },
  "Validation": {
    "description": "Holds the validation rules and the most current validation results for the component",
    "properties": {
      "isDirty": {
        "description": "Whether or not field has had user interaction. It will be set to true on user interaction.",
        "type": "boolean",
      },
      "result": {
        "$ref": "#/definitions/ValidationResult",
      },
      "rules": {
        "description": "The set of rules to restrict or define the accepted data for the current component. These are the rules to run for validation of the data input.",
        "examples": [
          "You can use it to define the max length of characters in an input field with a custom error message. rules: { required: { type: ValidationRuleTypes.MAX_LENGTH, validation: { maxLength: 5, }, errorMessage: 'Max length is 5', }, },",
        ],
        "type": "object",
      },
    },
    "type": "object",
  },
  "ValidationError": {
    "properties": {
      "message": {
        "description": "The error message",
        "type": "string",
      },
      "type": {
        "description": "Type of the error",
        "enum": [
          "required",
          "maxLength",
          "minLength",
          "arrayMinLength",
          "arrayMaxLength",
          "pattern",
          "min",
          "max",
          "mask",
          "number",
          "dateinput",
          "isBeforeDate",
          "isAfterDate",
          "customError",
          "isEmail",
        ],
        "minLength": 1,
        "type": "string",
      },
    },
    "required": [
      "type",
    ],
    "type": "object",
  },
  "ValidationResult": {
    "properties": {
      "errors": {
        "items": {
          "$ref": "#/definitions/ValidationError",
        },
        "type": "array",
      },
      "isValid": {
        "type": [
          "null",
          "boolean",
        ],
      },
    },
    "type": "object",
  },
}
`;
