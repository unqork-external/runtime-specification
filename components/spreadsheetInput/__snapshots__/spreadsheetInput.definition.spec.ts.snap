// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`SpreadsheetInput Contract Tests should ensure the contract is clear 1`] = `
[
  "key",
  "type",
  "columnsData",
  "value",
  "height",
  "rowHeights",
  "width",
  "display",
]
`;

exports[`SpreadsheetInput Contract Tests should ensure the contract is clear 2`] = `
{
  "columnsData": {
    "description": "Collection of columns definitions",
    "type": "array",
  },
  "display": {
    "$ref": "#/definitions/Display",
  },
  "executable": {
    "default": true,
    "description": "Defines whether or not the object will respond to events or fire operations. When \`true\`, the object will perform and behave as defined in its spec. When \`false\`, the object will no longer be responsive to the system.",
    "type": "boolean",
  },
  "height": {
    "default": 300,
    "description": "Height of the spreadsheet.",
    "type": "object",
  },
  "inputs": {
    "items": {
      "$ref": "#/definitions/InputRef",
    },
    "type": "array",
  },
  "key": {
    "description": "'key' is the user-defined, unique identifier for an object within a module. It doesn't have to be unique across different modules. Objects within the runtime use keys to target other objects.",
    "examples": [
      "I am the key",
      "bestKeyEver",
    ],
    "minLength": 1,
    "type": "string",
  },
  "package": {
    "$ref": "#/definitions/PackageModel",
  },
  "rowHeights": {
    "default": 36,
    "description": "Height of the rows in the spreadsheet.",
    "type": "object",
  },
  "showControls": {
    "description": "Optionally show controls at top of spreadsheetInput. Good for debugging locally.",
    "type": "boolean",
  },
  "signals": {
    "description": "An object which contains all of the signals for the component. The signals object can have any number of target keys as defined in the component definition which each contain an array of Signals.",
    "examples": [
      {
        "args": {
          "inputs": {
            "propertyPath": "value",
            "required": true,
            "targetKey": "firstName",
          },
        },
        "id": "firstNameWatcher",
        "operations": [
          {
            "options": {
              "logType": "warn",
              "thingToPrint": "firstNameWatcher operations fired: value watcher triggered",
            },
            "type": "PRINTER",
          },
        ],
        "type": "onWatch",
      },
      {
        "id": "textfieldOnBlur",
        "operations": [
          {
            "options": {
              "logType": "warn",
              "thingToPrint": "textfield received blur event from DOM",
            },
            "type": "PRINTER",
          },
        ],
        "type": "onBlur",
      },
      "<Example> Prompt: "I want a textfield that will trigger the root execute signal on myValidationComponent when the textfield input receives a blur event." Response: [{"key":"yourGeneratedTextfield","type":"textfield","signals":{"input":[{"id":"textfieldOnBlur","operations":[{"type":"EXECUTE","options":{"targetKey":"myValidationComponent","signalTarget":"root","shouldExecute":true}}],"type":"onBlur"}]}}] </Example>",
    ],
    "type": "object",
  },
  "styling": {
    "$ref": "#/definitions/SpreadsheetInputStyling",
  },
  "type": {
    "const": "spreadsheetInput",
    "description": "Name of the type of component.",
    "examples": [
      "spreadsheetInput",
    ],
    "minLength": 1,
    "type": "string",
  },
  "validation": {
    "$ref": "#/definitions/Validation",
  },
  "value": {
    "description": "Formatted values of the spreadsheetInput component. This value stays in sync with cell values of Handson Table.",
    "type": "array",
  },
  "width": {
    "default": "100%",
    "description": "Width of the spreadsheet.",
    "type": "object",
  },
}
`;
