// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UD Multi Select Contract Tests should ensure the contract is clear 1`] = `
[
  "key",
  "type",
]
`;

exports[`UD Multi Select Contract Tests should ensure the contract is clear 2`] = `
{
  "display": {
    "$ref": "#/definitions/Display",
  },
  "executable": {
    "default": true,
    "description": "Defines whether or not the object will respond to events or fire operations. When \`true\`, the object will perform and behave as defined in its spec. When \`false\`, the object will no longer be responsive to the system.",
    "type": "boolean",
  },
  "field": {
    "$ref": "#/definitions/UdMultiSelectInputField",
  },
  "inputs": {
    "items": {
      "$ref": "#/definitions/InputRef",
    },
    "type": "array",
  },
  "key": {
    "description": "'key' is the user-defined, unique identifier for an object within a module. It doesn't have to be unique across different modules. Objects within the runtime use keys to target other objects.",
    "examples": [
      "I am the key",
      "bestKeyEver",
    ],
    "minLength": 1,
    "type": "string",
  },
  "options": {
    "$ref": "#/definitions/UdMultiSelectOptions",
  },
  "package": {
    "$ref": "#/definitions/PackageModel",
  },
  "signals": {
    "description": "An object which contains all of the signals for the component. The signals object can have any number of target keys as defined in the component definition which each contain an array of Signals.",
    "examples": [
      {
        "args": {
          "inputs": {
            "propertyPath": "value",
            "required": true,
            "targetKey": "firstName",
          },
        },
        "id": "firstNameWatcher",
        "operations": [
          {
            "options": {
              "logType": "warn",
              "thingToPrint": "firstNameWatcher operations fired: value watcher triggered",
            },
            "type": "PRINTER",
          },
        ],
        "type": "onWatch",
      },
      {
        "id": "textfieldOnBlur",
        "operations": [
          {
            "options": {
              "logType": "warn",
              "thingToPrint": "textfield received blur event from DOM",
            },
            "type": "PRINTER",
          },
        ],
        "type": "onBlur",
      },
      "<Example> Prompt: "I want a textfield that will trigger the root execute signal on myValidationComponent when the textfield input receives a blur event." Response: [{"key":"yourGeneratedTextfield","type":"textfield","signals":{"input":[{"id":"textfieldOnBlur","operations":[{"type":"EXECUTE","options":{"targetKey":"myValidationComponent","signalTarget":"root","shouldExecute":true}}],"type":"onBlur"}]}}] </Example>",
    ],
    "type": "object",
  },
  "styling": {
    "$ref": "#/definitions/StylingModel",
  },
  "type": {
    "const": "udMultiSelect",
    "description": "Type of the component.",
    "examples": [
      "udMultiSelect",
    ],
    "minLength": 1,
    "type": "string",
  },
  "validation": {
    "$ref": "#/definitions/Validation",
  },
  "value": {
    "description": "Value of the multi select. This will be used as the value in submission data.",
    "examples": [
      [
        "a",
        "b",
        "c",
      ],
    ],
    "type": "object",
  },
}
`;

exports[`UD Multi Select Contract Tests should ensure the contract is clear 3`] = `
{
  "Display": {
    "description": "Basic UI settings related to how a component may be displayed and interacted with. 'Hidden' corresponds to visibility. 'Interactive' corresponds to the end-user's ability to interact with input components. 'Read Only View' corresponds to the component being rendered with an input element or as text.",
    "properties": {
      "hidden": {
        "default": false,
        "description": "Setting it to \`true\` hides the component from the view, while \`false\` shows it. Regardless of this setting, the component is always visible in the Module Editor. A hidden component can still receive information from other components.",
        "type": "boolean",
      },
      "interactive": {
        "default": true,
        "description": "When \`false\`, it is not possible to interact with or edit the input field. Its appearance is modified (grayed-out by default) to show its state, the HTML 'disabled' attribute is added to the field, and when hovering over it, the cursor also changes to alert of the disabled status. However, the component can still receive information from other components when it's not interactive.",
        "type": "boolean",
      },
      "readOnlyView": {
        "default": false,
        "description": "Defines how the component will be displayed. When \`false\`, the component is displayed as an input field. When \`true\`, the component will not accept any input from the user, and its value will be rendered inline as text and not as an input component. If no value is present, the word 'None' is rendered. If a prefix or suffix is set for the component, they also appear as inline text.",
        "type": "boolean",
      },
    },
    "type": "object",
  },
  "InputHelperText": {
    "description": "Details pertaining to the helper text element on a component, including the text to be displayed and visibility.",
    "properties": {
      "hidden": {
        "default": false,
        "description": "When \`true\`, it hides the helper text of the component.",
        "type": "boolean",
      },
      "text": {
        "description": "Configurable text that is displayed underneath the input field. Unlike tooltips, a helper text stays visible under the input field and displays on a single line.",
        "type": "string",
      },
    },
    "type": "object",
  },
  "InputLabel": {
    "description": "Details pertaining to the label element on a component, including the text to be displayed and visibility.",
    "properties": {
      "hidden": {
        "default": false,
        "description": "When \`true\`, it hides the label of the component. Note the label will still be displayed on the Module Editor.",
        "type": "boolean",
      },
      "text": {
        "description": "Configurable text that is displayed above the input field.",
        "type": "string",
      },
    },
    "type": "object",
  },
  "InputRef": {
    "description": "Objects may define other targets that they refer to. This becomes a link for operation execution within the Runtime.",
    "properties": {
      "alias": {
        "type": "string",
      },
      "propertyPath": {
        "type": "string",
      },
      "required": {
        "type": "boolean",
      },
      "silent": {
        "type": "boolean",
      },
      "targetKey": {
        "minLength": 1,
        "type": "string",
      },
      "type": {
        "type": "string",
      },
    },
    "required": [
      "targetKey",
    ],
    "type": "object",
  },
  "Label": {
    "properties": {
      "text": {
        "description": "Text displayed as the label for the field",
        "type": "string",
      },
    },
    "type": "object",
  },
  "PackageModel": {
    "description": "The PackageModel describes how the Vega Runtime will resolve dependencies",
    "properties": {
      "type": {
        "description": "Type of package",
        "type": "string",
      },
      "url": {
        "description": "URL of package",
        "type": "string",
      },
      "version": {
        "description": "Version of package",
        "type": "string",
      },
    },
    "type": "object",
  },
  "StylingModel": {
    "description": "Holds information for targeted styling of the component.",
    "properties": {
      "targets": {
        "type": "object",
      },
    },
    "type": "object",
  },
  "UdMultiRefreshTargetModel": {
    "properties": {
      "clearOnRefresh": {
        "default": false,
        "description": "Clear current value when refresh if it doesnt exist in the list.",
        "type": "boolean",
      },
      "delay": {
        "default": 250,
        "description": "Amount of time (in milliseconds) to delay request after typing has finished. Minimum 250.",
        "type": "number",
      },
      "property": {
        "description": "The JSONPath representation of what JSON key want to read from.",
        "minLength": 1,
        "type": "string",
      },
      "refreshType": {
        "description": "dropdown refresh type.",
        "enum": [
          "url",
          "dataReferenceKey",
        ],
        "minLength": 1,
        "type": "string",
      },
      "target": {
        "description": "The target entity to refer to.",
        "minLength": 1,
        "type": "string",
      },
    },
    "required": [
      "refreshType",
      "target",
      "property",
    ],
    "type": "object",
  },
  "UdMultiSelectInputField": {
    "description": "Details to be applied to the input element within a component.",
    "properties": {
      "creatable": {
        "default": false,
        "description": "Allows user to create new option based on text input filter value",
        "type": "boolean",
      },
      "customClass": {
        "description": "Adds a custom CSS class to the component. This is useful for targeting this component to apply custom styles.",
        "type": "string",
      },
      "helperText": {
        "$ref": "#/definitions/InputHelperText",
      },
      "hideChevron": {
        "default": false,
        "description": "Controls the visiblity of the chevron (carat at end of input field).",
        "type": "boolean",
      },
      "label": {
        "$ref": "#/definitions/Label",
      },
      "maxMenuHeight": {
        "description": "Gives a maximum height in px the dropdown can be before it scrolls.",
        "type": "number",
      },
      "multiple": {
        "default": false,
        "description": "Allows multiple values to be entered for this field.",
        "type": "boolean",
      },
      "placeholder": {
        "description": "An example or short explanation of the requested input. This appears inside of the input by default and disappears when the user enters a value.",
        "examples": [
          "First name - Expects the user to type their first name",
          "Enter your Social Security Number - Expects user's SSN",
          "dd/MM/YYYY - To show an expected date format (if you need a more robust component, try Date Input",
        ],
        "type": "string",
      },
      "prefix": {
        "description": "A symbol or text to display before the input field. Note this value will not be part of the submitted data",
        "examples": [
          "$",
          "@",
        ],
        "type": "string",
      },
      "showClearButton": {
        "default": false,
        "description": "Custom clear button will remove the currently selected value.",
        "type": "boolean",
      },
      "showClearInDropdown": {
        "default": false,
        "description": "React-select has a native clear button to clear the currently selected value.",
        "type": "boolean",
      },
      "suffix": {
        "description": "A symbol or text to display after the input field. Note this value will not be part of the submitted data",
        "examples": [
          ".com",
        ],
        "type": "string",
      },
      "template": {
        "default": "<span>{{ item.label }}</span>",
        "description": "The HTML template for the result data items.",
        "minLength": 1,
        "type": "string",
      },
      "tooltipDescription": {
        "description": "Tooltips are floating texts that appear when the cursor is positioned over an icon. They can span across multiple lines and provide hints about the requested data. Setting this property will make a question mark icon to be displayed on the right side of the component's label, and once the user hovers over it, the tooltip text will appear. Moving the cursor outside the icon's area hides the tooltip. Hiding the component's label automatically hides the tooltip.",
        "type": "string",
      },
    },
    "required": [
      "template",
    ],
    "type": "object",
  },
  "UdMultiSelectOptionModel": {
    "properties": {
      "data": {
        "description": "Additional option data",
        "type": "object",
      },
      "group": {
        "description": "Option group",
        "type": "string",
      },
      "label": {
        "description": "Option label",
        "minLength": 1,
        "type": "string",
      },
      "value": {
        "description": "Option value",
        "minLength": 1,
        "type": "string",
      },
    },
    "required": [
      "label",
      "value",
      "data",
    ],
    "type": "object",
  },
  "UdMultiSelectOptions": {
    "properties": {
      "filterBy": {
        "description": "Data properties on which to filter options.",
        "type": "string",
      },
      "groupByProperty": {
        "default": "group",
        "description": "Property on which to group options.",
        "type": "string",
      },
      "groupOptions": {
        "description": "Whether options should be organized into groups.",
        "type": "boolean",
      },
      "initial": {
        "description": "Initial options for the multiselect.",
        "items": {
          "$ref": "#/definitions/UdMultiSelectOptionModel",
        },
        "type": "array",
      },
      "rawValues": {
        "description": "Values coming in to the dropdown to be rendered. Should at least be an Object[] for the drop down to run through, and eventually map to the Dropdown Model represented by the \`values\` key",
        "type": [
          "null",
          "integer",
          "number",
          "string",
          "boolean",
          "array",
          "object",
        ],
      },
      "reactSelectValues": {
        "description": "Selected options used by the react-select input field.",
        "examples": [
          "[{label: "a", value: "a"}, {label: "b", value: "b"}",
        ],
        "items": {
          "$ref": "#/definitions/UdMultiSelectOptionModel",
        },
        "type": "array",
      },
      "refreshTarget": {
        "$ref": "#/definitions/UdMultiRefreshTargetModel",
      },
      "sortDirection": {
        "default": "none",
        "description": "Sort direction for select options.",
        "type": "string",
      },
      "valueProperty": {
        "description": "Value property for url reference source",
        "type": "string",
      },
      "values": {
        "description": "Values from the data source for multi select",
        "examples": [
          "[{label: "something", value: "something"}]",
        ],
        "items": {
          "$ref": "#/definitions/UdMultiSelectOptionModel",
        },
        "type": "array",
      },
    },
    "type": "object",
  },
  "Validation": {
    "description": "Holds the validation rules and the most current validation results for the component",
    "properties": {
      "isDirty": {
        "description": "Whether or not field has had user interaction. It will be set to true on user interaction.",
        "type": "boolean",
      },
      "result": {
        "$ref": "#/definitions/ValidationResult",
      },
      "rules": {
        "description": "The set of rules to restrict or define the accepted data for the current component. These are the rules to run for validation of the data input.",
        "examples": [
          "You can use it to define the max length of characters in an input field with a custom error message. rules: { required: { type: ValidationRuleTypes.MAX_LENGTH, validation: { maxLength: 5, }, errorMessage: 'Max length is 5', }, },",
        ],
        "type": "object",
      },
    },
    "type": "object",
  },
  "ValidationError": {
    "properties": {
      "message": {
        "description": "The error message",
        "type": "string",
      },
      "type": {
        "description": "Type of the error",
        "enum": [
          "required",
          "maxLength",
          "minLength",
          "arrayMinLength",
          "arrayMaxLength",
          "pattern",
          "min",
          "max",
          "mask",
          "number",
          "dateinput",
          "isBeforeDate",
          "isAfterDate",
          "customError",
          "isEmail",
        ],
        "minLength": 1,
        "type": "string",
      },
    },
    "required": [
      "type",
    ],
    "type": "object",
  },
  "ValidationResult": {
    "properties": {
      "errors": {
        "items": {
          "$ref": "#/definitions/ValidationError",
        },
        "type": "array",
      },
      "isValid": {
        "type": [
          "null",
          "boolean",
        ],
      },
    },
    "type": "object",
  },
}
`;
