// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Radio Contract Tests should ensure the contract is clear 1`] = `
[
  "key",
  "type",
  "defaultValue",
]
`;

exports[`Radio Contract Tests should ensure the contract is clear 2`] = `
{
  "defaultValue": {
    "description": "default value of the Radio component.",
    "minLength": 1,
    "type": "string",
  },
  "display": {
    "$ref": "#/definitions/Display",
  },
  "executable": {
    "default": true,
    "description": "Defines whether or not the object will respond to events or fire operations. When \`true\`, the object will perform and behave as defined in its spec. When \`false\`, the object will no longer be responsive to the system.",
    "type": "boolean",
  },
  "field": {
    "$ref": "#/definitions/RadioField",
  },
  "inputs": {
    "items": {
      "$ref": "#/definitions/InputRef",
    },
    "type": "array",
  },
  "key": {
    "description": "'key' is the user-defined, unique identifier for an object within a module. It doesn't have to be unique across different modules. Objects within the runtime use keys to target other objects.",
    "examples": [
      "I am the key",
      "bestKeyEver",
    ],
    "minLength": 1,
    "type": "string",
  },
  "options": {
    "$ref": "#/definitions/RadioOptions",
  },
  "package": {
    "$ref": "#/definitions/PackageModel",
  },
  "signals": {
    "description": "An object which contains all of the signals for the component. The signals object can have any number of target keys as defined in the component definition which each contain an array of Signals.",
    "examples": [
      {
        "args": {
          "inputs": {
            "propertyPath": "value",
            "required": true,
            "targetKey": "firstName",
          },
        },
        "id": "firstNameWatcher",
        "operations": [
          {
            "options": {
              "logType": "warn",
              "thingToPrint": "firstNameWatcher operations fired: value watcher triggered",
            },
            "type": "PRINTER",
          },
        ],
        "type": "onWatch",
      },
      {
        "id": "textfieldOnBlur",
        "operations": [
          {
            "options": {
              "logType": "warn",
              "thingToPrint": "textfield received blur event from DOM",
            },
            "type": "PRINTER",
          },
        ],
        "type": "onBlur",
      },
      "<Example> Prompt: "I want a textfield that will trigger the root execute signal on myValidationComponent when the textfield input receives a blur event." Response: [{"key":"yourGeneratedTextfield","type":"textfield","signals":{"input":[{"id":"textfieldOnBlur","operations":[{"type":"EXECUTE","options":{"targetKey":"myValidationComponent","signalTarget":"root","shouldExecute":true}}],"type":"onBlur"}]}}] </Example>",
    ],
    "type": "object",
  },
  "styling": {
    "$ref": "#/definitions/RadioStyling",
  },
  "type": {
    "const": "radio",
    "description": "Name of the type of component.",
    "examples": [
      "radio",
    ],
    "minLength": 1,
    "type": "string",
  },
  "validation": {
    "$ref": "#/definitions/Validation",
  },
  "value": {
    "description": "Value of the Radio component.",
    "type": "string",
  },
  "values": {
    "description": "The values to use for the Radio field",
    "items": {
      "$ref": "#/definitions/RadioOption",
    },
    "type": "array",
  },
}
`;

exports[`Radio Contract Tests should ensure the contract is clear 3`] = `
{
  "Display": {
    "description": "Basic UI settings related to how a component may be displayed and interacted with. 'Hidden' corresponds to visibility. 'Interactive' corresponds to the end-user's ability to interact with input components. 'Read Only View' corresponds to the component being rendered with an input element or as text.",
    "properties": {
      "hidden": {
        "default": false,
        "description": "Setting it to \`true\` hides the component from the view, while \`false\` shows it. Regardless of this setting, the component is always visible in the Module Editor. A hidden component can still receive information from other components.",
        "type": "boolean",
      },
      "interactive": {
        "default": true,
        "description": "When \`false\`, it is not possible to interact with or edit the input field. Its appearance is modified (grayed-out by default) to show its state, the HTML 'disabled' attribute is added to the field, and when hovering over it, the cursor also changes to alert of the disabled status. However, the component can still receive information from other components when it's not interactive.",
        "type": "boolean",
      },
      "readOnlyView": {
        "default": false,
        "description": "Defines how the component will be displayed. When \`false\`, the component is displayed as an input field. When \`true\`, the component will not accept any input from the user, and its value will be rendered inline as text and not as an input component. If no value is present, the word 'None' is rendered. If a prefix or suffix is set for the component, they also appear as inline text.",
        "type": "boolean",
      },
    },
    "type": "object",
  },
  "InputRef": {
    "description": "Inputs can be used to utlize dynamic values from other state within the runtime
  within a particular execution of an operation",
    "properties": {
      "alias": {
        "description": "Optionally alias resolved value for use in formulas",
        "type": "string",
      },
      "propertyPath": {
        "description": "Path to property on target to resolve",
        "type": "string",
      },
      "required": {
        "description": "If true, operation won't execute if targeted property has no value",
        "type": "boolean",
      },
      "silent": {
        "description": "Not used in later formulas, only used to determine if operation should execute",
        "type": "boolean",
      },
      "targetKey": {
        "description": "Key of target this input depends on",
        "minLength": 1,
        "type": "string",
      },
    },
    "required": [
      "targetKey",
    ],
    "type": "object",
  },
  "InputSubLabel": {
    "description": "Details pertaining to the sub-label element on a component, including the text to be displayed and visibility.",
    "properties": {
      "hidden": {
        "default": false,
        "description": "Hide sub-label text of the component",
        "type": "boolean",
      },
      "text": {
        "description": "Sub-label text for the component",
        "type": "string",
      },
    },
    "type": "object",
  },
  "Label": {
    "properties": {
      "text": {
        "description": "Text displayed as the label for the field",
        "type": "string",
      },
    },
    "type": "object",
  },
  "PackageModel": {
    "description": "The PackageModel describes how the Vega Runtime will resolve dependencies",
    "properties": {
      "type": {
        "description": "Type of package",
        "type": "string",
      },
      "url": {
        "description": "URL of package",
        "type": "string",
      },
      "version": {
        "description": "Version of package",
        "type": "string",
      },
    },
    "type": "object",
  },
  "RadioField": {
    "properties": {
      "dataSrc": {
        "description": "The data source for the radio component.",
        "enum": [
          "None",
          "dataReferenceKey",
        ],
        "minLength": 1,
        "type": "string",
      },
      "label": {
        "$ref": "#/definitions/Label",
      },
      "subLabel": {
        "$ref": "#/definitions/InputSubLabel",
      },
      "tooltipDescription": {
        "description": "Tooltip for the input",
        "type": "string",
      },
      "valuesFromInput": {
        "$ref": "#/definitions/ValuesFromInput",
      },
    },
    "required": [
      "dataSrc",
    ],
    "type": "object",
  },
  "RadioOption": {
    "properties": {
      "label": {
        "description": "label of the radio option.",
        "type": "string",
      },
      "value": {
        "description": "value of the radio option.",
        "type": [
          "string",
          "number",
        ],
      },
    },
    "type": "object",
  },
  "RadioOptions": {
    "properties": {
      "buttonGroup": {
        "default": false,
        "type": "boolean",
      },
      "customClass": {
        "description": "Any custom CSS classes to apply to the component.",
        "type": "string",
      },
      "inline": {
        "default": false,
        "type": "boolean",
      },
      "required": {
        "default": false,
        "type": "boolean",
      },
      "tabindex": {
        "default": 0,
        "type": "number",
      },
    },
    "type": "object",
  },
  "RadioStyleTargets": {
    "properties": {
      "coreRadioOptionInput": {
        "description": "Adds styles to the HTML option input elements of the CoreRadio sub-component",
        "type": [
          "string",
          "object",
        ],
      },
      "coreRadioOptionLabel": {
        "description": "Adds styles to the HTML option label elements of the CoreRadio sub-component",
        "type": [
          "string",
          "object",
        ],
      },
      "coreRadioRoot": {
        "description": "Adds styles to the root of the CoreRadio sub-component",
        "type": [
          "string",
          "object",
        ],
      },
      "errorsFieldError": {
        "description": "Adds styles to Radio's each FieldError sub-component in Errors",
        "type": [
          "string",
          "object",
        ],
      },
      "errorsRoot": {
        "description": "Adds styles to Radio's root of the Errors sub-component",
        "type": [
          "string",
          "object",
        ],
      },
      "errorsUnorderedList": {
        "description": "Adds styles to Radio UL HTML element in the Errors sub-component",
        "type": [
          "string",
          "object",
        ],
      },
      "errorsUnorderedListItem": {
        "description": "Adds styles to Radio's each LI HTML element in the Errors sub-component",
        "type": [
          "string",
          "object",
        ],
      },
      "label": {
        "description": "Adds styles to Radio's label.",
        "type": [
          "string",
          "object",
        ],
      },
      "readOnly": {
        "description": "Adds styles to Radio's read only text.",
        "type": [
          "string",
          "object",
        ],
      },
      "root": {
        "description": "Adds styles to Radio's ComponentWrapper.",
        "type": [
          "string",
          "object",
        ],
      },
      "subLabel": {
        "description": "Adds styles to Radio's sublabel.",
        "type": [
          "string",
          "object",
        ],
      },
      "tooltipButton": {
        "description": "Adds styles to the Tooltip sub-component Button element",
        "type": [
          "string",
          "object",
        ],
      },
      "tooltipPopover": {
        "description": "Adds styles to the Tooltip sub-component Popover element",
        "type": [
          "string",
          "object",
        ],
      },
    },
    "type": "object",
  },
  "RadioStyling": {
    "description": "Holds information for targeted styling of the component.",
    "properties": {
      "targets": {
        "$ref": "#/definitions/RadioStyleTargets",
        "type": "object",
      },
    },
    "type": "object",
  },
  "StylingModel": {
    "description": "Holds information for targeted styling of the component.",
    "properties": {
      "targets": {
        "type": "object",
      },
    },
    "type": "object",
  },
  "Validation": {
    "description": "Holds the validation rules and the most current validation results for the component",
    "properties": {
      "isDirty": {
        "description": "Whether or not field has had user interaction. It will be set to true on user interaction.",
        "type": "boolean",
      },
      "result": {
        "$ref": "#/definitions/ValidationResult",
      },
      "rules": {
        "description": "The set of rules to restrict or define the accepted data for the current component. These are the rules to run for validation of the data input.",
        "examples": [
          "You can use it to define the max length of characters in an input field with a custom error message. rules: { required: { type: ValidationRuleTypes.MAX_LENGTH, validation: { maxLength: 5, }, errorMessage: 'Max length is 5', }, },",
        ],
        "type": "object",
      },
    },
    "type": "object",
  },
  "ValidationError": {
    "properties": {
      "message": {
        "description": "The error message",
        "type": "string",
      },
      "type": {
        "description": "Type of the error",
        "enum": [
          "required",
          "maxLength",
          "minLength",
          "arrayMinLength",
          "arrayMaxLength",
          "pattern",
          "min",
          "max",
          "mask",
          "number",
          "dateinput",
          "isBeforeDate",
          "isAfterDate",
          "customError",
          "isEmail",
        ],
        "minLength": 1,
        "type": "string",
      },
    },
    "required": [
      "type",
    ],
    "type": "object",
  },
  "ValidationResult": {
    "properties": {
      "errors": {
        "items": {
          "$ref": "#/definitions/ValidationError",
        },
        "type": "array",
      },
      "isValid": {
        "type": [
          "null",
          "boolean",
        ],
      },
    },
    "type": "object",
  },
  "ValuesFromInput": {
    "properties": {
      "labelProperty": {
        "description": "The property to use for the Labels when using dataReferenceKey",
        "type": "string",
      },
      "referenceKey": {
        "description": "The dataReferenceKey component ID to use for the Radio field",
        "type": "string",
      },
      "valueProperty": {
        "description": "The property to use for the Values when using dataReferenceKey",
        "type": "string",
      },
    },
    "type": "object",
  },
}
`;
