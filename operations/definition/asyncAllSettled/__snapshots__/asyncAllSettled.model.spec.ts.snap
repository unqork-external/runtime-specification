// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`Operation Model: AsyncAllSettled Tests should match this JSON Schema 1`] = `
{
  "autogenDisabled": true,
  "definitions": {
    "AsyncAllSettledOperationOptions": {
      "properties": {
        "operations": {
          "description": "Async operations that will run in parallel. When all have either resolved or rejected, this operation will finish",
          "items": {
            "$ref": "#/definitions/Operation",
          },
          "minItems": 1,
          "type": "array",
        },
        "shouldExecute": {
          "default": true,
          "description": "
    Conditionally execute this operation.
    Can set to false to temporarily disabled when debugging.
  ",
          "type": [
            "string",
            "boolean",
          ],
        },
        "throwOnAnyRejection": {
          "description": "Controls if once all promises have settled, if this operation will throw with the rejected values. Default: false.",
          "type": "boolean",
        },
      },
      "required": [
        "operations",
      ],
      "type": "object",
    },
    "Operation": {
      "properties": {
        "creatorSummary": {
          "description": "A detailed summary of the operation",
          "type": "string",
        },
        "name": {
          "description": "Name of the operation",
          "type": "string",
        },
        "type": {
          "type": "object",
        },
      },
      "type": "object",
    },
  },
  "properties": {
    "creatorSummary": {
      "description": "A detailed summary of the operation",
      "type": "string",
    },
    "name": {
      "description": "Name of the operation",
      "type": "string",
    },
    "options": {
      "$ref": "#/definitions/AsyncAllSettledOperationOptions",
    },
    "type": {
      "const": "ASYNC_ALL_SETTLED",
      "examples": [
        "ASYNC_ALL_SETTLED",
      ],
      "type": "string",
    },
  },
  "required": [
    "options",
  ],
  "type": "object",
}
`;
