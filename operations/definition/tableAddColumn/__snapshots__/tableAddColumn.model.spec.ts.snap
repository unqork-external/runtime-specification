// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Operation Model: TableAddColumn Tests should match this JSON Schema 1`] = `
{
  "definitions": {
    "BaseComponentDefinition": {
      "description": "Base Component Definition is the fundamental interface any component that wishes to leverage the runtime must follow. It is the agreed upon contract between the Runtime and anything that should be recognized as a component.",
      "properties": {
        "executable": {
          "default": true,
          "description": "Defines whether or not the object will respond to events or fire operations. When \`true\`, the object will perform and behave as defined in its spec. When \`false\`, the object will no longer be responsive to the system.",
          "type": "boolean",
        },
        "inputs": {
          "items": {
            "$ref": "#/definitions/InputRef",
          },
          "type": "array",
        },
        "key": {
          "description": "'key' is the user-defined, unique identifier for an object within a module. It doesn't have to be unique across different modules. Objects within the runtime use keys to target other objects.",
          "examples": [
            "I am the key",
            "bestKeyEver",
          ],
          "minLength": 1,
          "type": "string",
        },
        "package": {
          "$ref": "#/definitions/PackageModel",
        },
        "signals": {
          "description": "An object which contains all of the signals for the component. The signals object can have any number of target keys as defined in the component definition which each contain an array of Signals.",
          "examples": [
            {
              "args": {
                "inputs": {
                  "propertyPath": "value",
                  "required": true,
                  "targetKey": "firstName",
                },
              },
              "id": "firstNameWatcher",
              "operations": [
                {
                  "options": {
                    "logType": "warn",
                    "thingToPrint": "firstNameWatcher operations fired: value watcher triggered",
                  },
                  "type": "PRINTER",
                },
              ],
              "type": "onWatch",
            },
            {
              "id": "textfieldOnBlur",
              "operations": [
                {
                  "options": {
                    "logType": "warn",
                    "thingToPrint": "textfield received blur event from DOM",
                  },
                  "type": "PRINTER",
                },
              ],
              "type": "onBlur",
            },
            "<Example> Prompt: "I want a textfield that will trigger the root execute signal on myValidationComponent when the textfield input receives a blur event." Response: [{"key":"yourGeneratedTextfield","type":"textfield","signals":{"input":[{"id":"textfieldOnBlur","operations":[{"type":"EXECUTE","options":{"targetKey":"myValidationComponent","signalTarget":"root","shouldExecute":true}}],"type":"onBlur"}]}}] </Example>",
          ],
          "type": "object",
        },
        "styling": {
          "$ref": "#/definitions/StylingModel",
        },
        "type": {
          "description": "Name of the type of component.",
          "minLength": 1,
          "type": "string",
        },
        "validation": {
          "$ref": "#/definitions/Validation",
        },
        "value": {
          "description": "Current value of the component",
          "type": [
            "null",
            "integer",
            "number",
            "string",
            "boolean",
            "array",
            "object",
          ],
        },
      },
      "required": [
        "key",
        "type",
      ],
      "type": "object",
    },
    "InputRef": {
      "description": "Inputs can be used to utlize dynamic values from other state within the runtime
  within a particular execution of an operation",
      "properties": {
        "alias": {
          "description": "Optionally alias resolved value for use in formulas",
          "type": "string",
        },
        "propertyPath": {
          "description": "Path to property on target to resolve",
          "type": "string",
        },
        "required": {
          "description": "If true, operation won't execute if targeted property has no value",
          "type": "boolean",
        },
        "silent": {
          "description": "Not used in later formulas, only used to determine if operation should execute",
          "type": "boolean",
        },
        "targetKey": {
          "description": "Key of target this input depends on",
          "minLength": 1,
          "type": "string",
        },
      },
      "required": [
        "targetKey",
      ],
      "type": "object",
    },
    "PackageModel": {
      "description": "The PackageModel describes how the Vega Runtime will resolve dependencies",
      "properties": {
        "type": {
          "description": "Type of package",
          "type": "string",
        },
        "url": {
          "description": "URL of package",
          "type": "string",
        },
        "version": {
          "description": "Version of package",
          "type": "string",
        },
      },
      "type": "object",
    },
    "StylingModel": {
      "description": "Holds information for targeted styling of the component.",
      "properties": {
        "targets": {
          "type": "object",
        },
      },
      "type": "object",
    },
    "TableAddColumnOperationOptions": {
      "properties": {
        "definitions": {
          "description": "The component definition(s) to be added to the target Table component",
          "items": {
            "$ref": "#/definitions/BaseComponentDefinition",
          },
          "type": "array",
        },
        "inputs": {
          "description": "
    Inputs to be used within formulas in other operation options
  ",
          "items": {
            "$ref": "#/definitions/InputRef",
          },
          "type": "array",
        },
        "isVega": {
          "description": "Specifies whether the component is a Vega component",
          "type": "boolean",
        },
        "shouldExecute": {
          "description": "
    Conditionally execute this operation based on a formula.
    Can set to false to temporarily disabled when debugging
  ",
          "type": [
            "string",
            "boolean",
          ],
        },
        "targetKey": {
          "description": "Key or path that this operation should target or operate upon",
          "examples": [
            "myComponent",
            "panel.*",
            "grid.row(#).col(name)",
          ],
          "minLength": 1,
          "type": "string",
        },
      },
      "required": [
        "targetKey",
        "definitions",
        "isVega",
      ],
      "type": "object",
    },
    "Validation": {
      "description": "Holds the validation rules and the most current validation results for the component",
      "properties": {
        "isDirty": {
          "description": "Whether or not field has had user interaction. It will be set to true on user interaction.",
          "type": "boolean",
        },
        "result": {
          "$ref": "#/definitions/ValidationResult",
        },
        "rules": {
          "description": "The set of rules to restrict or define the accepted data for the current component. These are the rules to run for validation of the data input.",
          "examples": [
            "You can use it to define the max length of characters in an input field with a custom error message. rules: { required: { type: ValidationRuleTypes.MAX_LENGTH, validation: { maxLength: 5, }, errorMessage: 'Max length is 5', }, },",
          ],
          "type": "object",
        },
      },
      "type": "object",
    },
    "ValidationError": {
      "properties": {
        "message": {
          "description": "The error message",
          "type": "string",
        },
        "type": {
          "description": "Type of the error",
          "enum": [
            "required",
            "maxLength",
            "minLength",
            "arrayMinLength",
            "arrayMaxLength",
            "pattern",
            "min",
            "max",
            "mask",
            "number",
            "dateinput",
            "isBeforeDate",
            "isAfterDate",
            "customError",
            "isEmail",
          ],
          "minLength": 1,
          "type": "string",
        },
      },
      "required": [
        "type",
      ],
      "type": "object",
    },
    "ValidationResult": {
      "properties": {
        "errors": {
          "items": {
            "$ref": "#/definitions/ValidationError",
          },
          "type": "array",
        },
        "isValid": {
          "type": [
            "null",
            "boolean",
          ],
        },
      },
      "type": "object",
    },
  },
  "description": "Adds columns to the Table component based on provided component definition(s).",
  "properties": {
    "creatorSummary": {
      "description": "A detailed summary of the operation",
      "type": "string",
    },
    "name": {
      "description": "Name of the operation",
      "type": "string",
    },
    "options": {
      "$ref": "#/definitions/TableAddColumnOperationOptions",
    },
    "type": {
      "const": "TABLE_ADD_COLUMN",
      "examples": [
        "TABLE_ADD_COLUMN",
      ],
      "type": "string",
    },
  },
  "required": [
    "options",
  ],
  "stability": "STABLE",
  "type": "object",
}
`;
